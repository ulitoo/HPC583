/*
 *  This file includes the standard C libraries, as well as system dependant
 *  include files.  All BLACS routines include this file.
 */

#ifndef BCONFIG_H
#define BCONFIG_H 1

/*
 * Include files
 */
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <stdarg.h>
#include <mpi.h>

/*
 * Integer types used by BLACS
 */
#ifndef Int
#define Int int
#endif
#ifndef MpiInt
#define MpiInt int
#endif

/*
 * These macros define the naming strategy needed for a fortran
 * routine to call a C routine, and whether to build so they may be
 * called from C or fortran.  For the fortran call C interface, ADD_ assumes that
 * fortran calls expect C routines to have an underscore postfixed to the name
 * (Suns, and the Intel expect this).  NOCHANGE indicates that fortran expects
 * the name called by fortran to be identical to that compiled by C
 * (AIX does this).  UPCASE says it expects C routines called by fortran
 * to be in all upcase (CRAY wants this).  The variable FORTRAN_CALL_C is always
 * set to one of these values.  If the BLACS will be called from C, we define
 * INTFACE to be CALL_C, otherwise, it is set to FORTRAN_CALL_C.
 */
#define ADD_     0
#define NOCHANGE 1
#define UPCASE   2
#define FCISF2C  3
#define C_CALL   4

#ifdef UpCase
#define FORTRAN_CALL_C UPCASE
#endif

#ifdef NoChange
#define FORTRAN_CALL_C NOCHANGE
#endif

#ifdef Add_
#define FORTRAN_CALL_C ADD_
#endif

#ifdef FortranIsF2C
#define FORTRAN_CALL_C FCISF2C
#endif

#ifndef FORTRAN_CALL_C
#define FORTRAN_CALL_C ADD_
#endif

#ifdef CallFromC
#define INTFACE C_CALL
#else
#define INTFACE FORTRAN_CALL_C
#endif

/*
 *  Uncomment these macro definitions, and substitute the topology of your
 *  choice to vary the default topology (TOP = ' ') for broadcast and combines.
#define DefBSTop '1'
#define DefCombTop '1'
 */

/*
 * Uncomment this line if your MPI_Send provides a locally-blocking send
 */
//#define SndIsLocBlk

/*
 * Comment out the following line if your MPI does a data copy on every
 * non-contiguous send
 */
#define MpiBuffGood

/*
 * If your MPI cannot form data types of zero length, uncomment the
 * following definition
 */
/* #define ZeroByteTypeBug */

/*
 *  These macros set the timing and debug levels for the BLACS.  The fastest
 *  code is produced by setting both values to 0.  Higher levels provide
 *  more timing/debug information at the cost of performance.  Present levels
 *  of debug are:
 *  0 : No debug information
 *  1 : Mainly parameter checking.
 *
 *  Present levels of timing are:
 *  0 : No timings taken
 */
#ifndef BlacsDebugLvl
#define BlacsDebugLvl 0
#endif
#ifndef BlacsTimingLvl
#define BlacsTimingLvl 0
#endif

#endif
#ifndef BDEF_H
#define BDEF_H 1

/*
 * Include the system dependant and user defined stuff
 */
#include "Bconfig.h"

/*
 * Data type defining a scope for the BLACS
 */
typedef struct bLaCsScOpE BLACSSCOPE;
struct bLaCsScOpE
{
   MPI_Comm comm;
   Int ScpId, MaxId, MinId;
   Int Np, Iam;
};
/*
 * Data type defining a context for the BLACS
 */
typedef struct bLaCsCoNtExT BLACSCONTEXT;
struct bLaCsCoNtExT
{
   BLACSSCOPE rscp, cscp, ascp, pscp; /* row, column, all, and pt2pt scopes */
   BLACSSCOPE *scp;                   /* pointer to present scope */
   Int TopsRepeat;                    /* Use only repeatable topologies? */
   Int TopsCohrnt;                    /* Use only coherent topologies? */
   Int Nb_bs, Nr_bs;           /* for bcast general tree and multiring tops */
   Int Nb_co, Nr_co;           /* for combine general tree and multiring tops */
};

/*
 *  Define the fortran data types COMPLEX*8 (SCOMPLEX)
 *  and COMPLEX*16 (DCOMPLEX).
 */
typedef struct {double r, i;} DCOMPLEX;
typedef struct {float r, i;} SCOMPLEX;

/*
 *  These variables will be defined to be MPI datatypes for complex and double
 *  complex if we are using the C interface to MPI.  If we use the fortran
 *  interface, we need to declare the contants array.  I'm too lazy to declare
 *  these guys external in every file that needs them.
 */
#ifndef GlobalVars
   extern Int *BI_COMM_WORLD;
#endif

/*
 *  Definition of buffer type for BLACS' asynchronous operations
 */
typedef struct bLaCbUfF BLACBUFF;
struct bLaCbUfF
{
   char *Buff;             /* send/recv buffer */
   Int Len;                /* length of buffer in bytes */
   Int nAops;              /* number of asynchronous operations out of buff */
   MPI_Request *Aops;   /* list of async. operations out of buff */
   MPI_Datatype dtype;  /* data type of buffer */
   Int N;                  /* number of elements of data type in buff */
   BLACBUFF *prev, *next;  /* pointer to the other BLACBUFF in queue */
};

/*
 * Pointer to the combine's vector-vector functions
 */
typedef void (*VVFUNPTR)(Int, char *, char *);
typedef void (*SDRVPTR)(BLACSCONTEXT *, Int, Int, BLACBUFF *);


#define BI_DistType                  unsigned short
#define BI_MpiDistType               MPI_UNSIGNED_SHORT

#define BUFFALIGN    8      /* force all buffers to 8 byte alignment */
#define BANYNODE     MPI_ANY_SOURCE
#define PT2PTID      9976   /* TAG used for point to point */
#define NOTINCONTEXT -1  /* Indicates node called gridmap, but not in grid */
#define MAXNCTXT     10      /* initial guess at max # of contexts */
#define MAXNSYSCTXT  10   /* initial guess at max # of system context */
#define AOPDONE      MPI_REQUEST_NULL
#define BUFWAIT      120      /* Length of time to wait for emergency buff */

/*
 * Error codes
 */
#define NORV 1          /* No receiver (only 1 proc in scoped op) */
#define NPOW2 2         /* Number of procs is not a power of 2 */
#define BADSCP 3        /* Scope not row, column or all */

/*
 * Data types
 */
#define INTEGER   3
#define SINGLE    4
#define DOUBLE    6
#define COMPLEX8  5
#define COMPLEX16 7

#define FULLCON 0      /* top is fully connected */

/*
 * Routine types
 */
#define RT_SD    1
#define RT_RV    2
#define RT_BS    3
#define RT_BR    4
#define RT_COMB  5

/*
 * Legal WHAT values for BLACS_SET
 */
#define SGET_SYSCONTXT    0
#define SGET_MSGIDS       1
#define SGET_DEBUGLVL     2
#define SGET_BLACSCONTXT 10
#define SGET_NR_BS       11
#define SGET_NB_BS       12
#define SGET_NR_CO       13
#define SGET_NB_CO       14
#define SGET_TOPSREPEAT  15
#define SGET_TOPSCOHRNT  16

/*
 * These are prototypes for error and warning functions -- I don't want
 * to prototype them in each routine.
 */
void BI_BlacsWarn(Int ConTxt, Int line, char *file, char *form, ...);
void BI_BlacsErr(Int ConTxt, Int line, char *file, char *form, ...);
Int BI_ContxtNum(BLACSCONTEXT *ctxt);

/*
 * If we've got an ANSI standard C compiler, we can use void pointers...
 */
#define BVOID void


/*
 * ========================================================================
 *     PREPROCESSOR MACRO FUNCTIONS USED FOR OPTIMIZATION & CONVENIENCE
 * ========================================================================
 */

#define Mlowcase(C) ( ((C) > 64 && (C) < 91) ? (C) | 32 : (C) )

/*
 * Slightly modified gridinfo substitute
 */
#define Mgridinfo(ctxt, Ng0, nprow0, npcol0, myrow0, mycol0)\
{\
   (Ng0) = (ctxt)->ascp.Np;\
   (nprow0) = (ctxt)->cscp.Np;\
   (npcol0) = (ctxt)->rscp.Np;\
   (myrow0) = (ctxt)->cscp.Iam;\
   (mycol0) = (ctxt)->rscp.Iam;\
}

/*
 * These routines return coordinates based on nodes number, or node number
 * based on coordinates.  Those routines with v after the M return virtual
 * nodes numbers (i.e., in respect to the grid, not physical node numbers)
 * based on grid coordinates, or grid coordinates based on virtual node numbers.
 */
#define Mpcoord(ctxt, node, prow, pcol)\
{\
   (prow) = (node) / (ctxt)->rscp.Np;\
   (pcol) = (node) % (ctxt)->rscp.Np;\
}
#define Mvpcoord(ctxt, node, prow, pcol) \
        Mpcoord((ctxt), (node), (prow), (pcol));

#define Mkpnum(ctxt, prow, pcol)  ( (prow)*(ctxt)->rscp.Np+(pcol) )
#define Mvkpnum(ctxt, prow, pcol) ( (prow)*(ctxt)->rscp.Np+(pcol) )

/*
 * This macro returns scoped message ID's.
 */
#define Mscopeid(ctxt) (ctxt)->scp->ScpId; \
   if (++(ctxt)->scp->ScpId == (ctxt)->scp->MaxId) \
      (ctxt)->scp->ScpId = (ctxt)->scp->MinId;

/*
 *  Get context, and check for validity if debug level is high
 */
#if (BlacsDebugLvl > 0)
#define MGetConTxt(Context, ctxtptr)\
{\
   extern BLACSCONTEXT **BI_MyContxts;\
   extern Int BI_MaxNCtxt;\
   if ( ((Context) >= BI_MaxNCtxt) || ((Context) < 0) )\
      BI_BlacsErr(-1, __LINE__, __FILE__, "Invalid context handle: %d",\
                  (Context));\
   else if (BI_MyContxts[(Context)] == NULL)\
      BI_BlacsErr(-1, __LINE__, __FILE__, "Invalid context, handle=%d",\
                  (Context));\
   (ctxtptr) = BI_MyContxts[(Context)];\
}
#else
#define MGetConTxt(Context, ctxtptr)\
{\
   extern BLACSCONTEXT **BI_MyContxts;\
   (ctxtptr) = BI_MyContxts[(Context)];\
}
#endif
/*
 * This macro handles MPI errors
 */
#if(BlacsDebugLvl > 0)
#define Mmpierror(ierr, rout, ctxt, line, file) \
{ \
   if ( (ierr) != BI_MPI_SUCCESS )\
      BI_BlacsErr(BI_ContxtNum((ctxt)), (line), (file), \
                  "MPI error %d on call to %s", (ierr), (rout)); \
}
#else
#define Mmpierror(ierr, rout, ctxt, line, file)
#endif
/*
 * A small macro useful for debugging
 */
#define ErrPrint \
{ \
   extern Int BI_Iam; \
   fprintf(stderr, "%d: line %d of file %s\n", BI_Iam, __LINE__, __FILE__); \
}

/*
 * These macros allow for the funky function declarations and character handling
 * needed on the CRAY to have a C routine callable from fortran
 */
#define F_VOID_FUNC void
#define F_INT_FUNC  Int
#define F_DOUBLE_FUNC double

#if (INTFACE == C_CALL)

#define F2C_CharTrans(c) *(c)

#else

#ifdef CRAY
#define F2C_CharTrans(c) *( _fcdtocp((c)) )
#define F_CHAR      _fcd
#else
#define F2C_CharTrans(c) *(c)
#define F_CHAR      char *
#endif

#endif

/*
 *  These macros allow for accessing values and addresses of parameters, which
 *  will be pointers if we're using fortran, and values if we're using C.
 */
#if (INTFACE == C_CALL)
#define Mpval(para) (para)
#define Mpaddress(para) (&(para))
#define Mwalltime Cdwalltime00
#else
#define Mpval(para) (*(para))
#define Mpaddress(para) (para)
#define Mwalltime dwalltime00_
#endif

/*
 * Real and complex absolute values
 */
#define Rabs(x) ( (x) < 0 ? (x) * -1 : (x) )
#define Cabs(z) ( (((z).i) < 0 ? ((z).i) * -1 : ((z).i)) + (((z).r) < 0 ? ((z).r) * -1 : ((z).r)) )

/*
 * Figures the length of packed trapezoidal matrix
 */
#define trsize(diag, m, n, bytes, length)\
{\
   if ( (diag) == 'u' ) (length) = 1;\
   else (length) = 0;\
   if ( (m) > (n) )\
      (length) = ( (n) * ( (m) - (n) ) + ( (n)*(n) ) - ( (n)*(n) )/2 +\
                   (n)/2 - (n) * (length) ) * (bytes);\
   else\
      (length) = ( (m) * ( (n) - (m) ) + ( (m)*(m) ) - ( (m)*(m) )/2 +\
                   (m)/2 - (m) * (length) ) * (bytes);\
}

/*
 * These macros call the correct packing/unpacking routines
 */
#define BI_cmvcopy(m, n, A, lda, buff) \
        BI_smvcopy(2*(m), (n), (float *) (A), 2*(lda), (float *) (buff))
#define BI_cvmcopy(m, n, A, lda, buff) \
        BI_svmcopy(2*(m), (n), (float *) (A), 2*(lda), (float *) (buff))
#define BI_zmvcopy(m, n, A, lda, buff) \
        BI_dmvcopy(2*(m), (n), (double *) (A), 2*(lda), (double *) (buff))
#define BI_zvmcopy(m, n, A, lda, buff) \
        BI_dvmcopy(2*(m), (n), (double *) (A), 2*(lda), (double *) (buff))

/*
 * This macro avoids freeing types when the zero-byte workaround was applied
 */
#ifdef ZeroByteTypeBug
#define BI_MPI_TYPE_FREE(t) (*(t) != MPI_BYTE ? MPI_Type_free(t) : 0)
#else
#define BI_MPI_TYPE_FREE(t) MPI_Type_free(t)
#endif

#if (FORTRAN_CALL_C == NOCHANGE)
/*
 * These defines set up the naming scheme required to have a fortran
 * routine call a C routine (which is what the BLACS are written in)
 * for the following Fortran to C interface:
 *           FORTRAN CALL               C DECLARATION
 *           call dgebs2d(...)          void dgebs2d(...)
 */

/*
 * Support routines
 */
#define blacs_pinfo_                   blacs_pinfo
#define blacs_setup_                   blacs_setup
#define setpvmtids_                    setpvmtids
#define blacs_set_                     blacs_set
#define blacs_get_                     blacs_get
#define blacs_gridinit_                blacs_gridinit
#define blacs_gridmap_                 blacs_gridmap
#define ksendid_                       ksendid
#define krecvid_                       krecvid
#define kbsid_                         kbsid
#define kbrid_                         kbrid
#define blacs_freebuff_                blacs_freebuff
#define blacs_gridexit_                blacs_gridexit
#define blacs_abort_                   blacs_abort
#define blacs_exit_                    blacs_exit
#define blacs_gridinfo_                blacs_gridinfo
#define blacs_pnum_                    blacs_pnum
#define blacs_pcoord_                  blacs_pcoord
#define dcputime00_                    dcputime00
#define dwalltime00_                   dwalltime00
#define blacs_barrier_                 blacs_barrier

/*
 * Main, type dependent, routines
 */
#define igesd2d_   igesd2d
#define igerv2d_   igerv2d
#define igebs2d_   igebs2d
#define igebr2d_   igebr2d
#define itrsd2d_   itrsd2d
#define itrrv2d_   itrrv2d
#define itrbs2d_   itrbs2d
#define itrbr2d_   itrbr2d
#define igsum2d_   igsum2d
#define igamx2d_   igamx2d
#define igamn2d_   igamn2d
#define sgesd2d_   sgesd2d
#define sgerv2d_   sgerv2d
#define sgebs2d_   sgebs2d
#define sgebr2d_   sgebr2d
#define strsd2d_   strsd2d
#define strrv2d_   strrv2d
#define strbs2d_   strbs2d
#define strbr2d_   strbr2d
#define sgsum2d_   sgsum2d
#define sgamx2d_   sgamx2d
#define sgamn2d_   sgamn2d
#define dgesd2d_   dgesd2d
#define dgerv2d_   dgerv2d
#define dgebs2d_   dgebs2d
#define dgebr2d_   dgebr2d
#define dtrsd2d_   dtrsd2d
#define dtrrv2d_   dtrrv2d
#define dtrbs2d_   dtrbs2d
#define dtrbr2d_   dtrbr2d
#define dgsum2d_   dgsum2d
#define dgamx2d_   dgamx2d
#define dgamn2d_   dgamn2d
#define cgesd2d_   cgesd2d
#define cgerv2d_   cgerv2d
#define cgebs2d_   cgebs2d
#define cgebr2d_   cgebr2d
#define ctrsd2d_   ctrsd2d
#define ctrrv2d_   ctrrv2d
#define ctrbs2d_   ctrbs2d
#define ctrbr2d_   ctrbr2d
#define cgsum2d_   cgsum2d
#define cgamx2d_   cgamx2d
#define cgamn2d_   cgamn2d
#define zgesd2d_   zgesd2d
#define zgerv2d_   zgerv2d
#define zgebs2d_   zgebs2d
#define zgebr2d_   zgebr2d
#define ztrsd2d_   ztrsd2d
#define ztrrv2d_   ztrrv2d
#define ztrbs2d_   ztrbs2d
#define ztrbr2d_   ztrbr2d
#define zgsum2d_   zgsum2d
#define zgamx2d_   zgamx2d
#define zgamn2d_   zgamn2d

#elif (FORTRAN_CALL_C == UPCASE)
/*
 * These defines set up the naming scheme required to have a fortran
 * routine call a C routine (which is what the BLACS are written in)
 * for the following Fortran to C interface:
 *           FORTRAN CALL               C DECLARATION
 *           call dgebs2d(...)          void DGEBS2D(...)
 */
/*
 * Support routines
 */
#define blacs_pinfo_                   BLACS_PINFO
#define blacs_setup_                   BLACS_SETUP
#define setpvmtids_                    SETPVMTIDS
#define blacs_set_                     BLACS_SET
#define blacs_get_                     BLACS_GET
#define blacs_gridinit_                BLACS_GRIDINIT
#define blacs_gridmap_                 BLACS_GRIDMAP
#define ksendid_                       KSENDID
#define krecvid_                       KRECVID
#define kbsid_                         KBSID
#define kbrid_                         KBRID
#define blacs_freebuff_                BLACS_FREEBUFF
#define blacs_gridexit_                BLACS_GRIDEXIT
#define blacs_abort_                   BLACS_ABORT
#define blacs_exit_                    BLACS_EXIT
#define blacs_gridinfo_                BLACS_GRIDINFO
#define blacs_pnum_                    BLACS_PNUM
#define blacs_pcoord_                  BLACS_PCOORD
#define dcputime00_                    DCPUTIME00
#define dwalltime00_                   DWALLTIME00
#define blacs_barrier_                 BLACS_BARRIER

/*
 * Main, type dependent, routines
 */
#define igesd2d_   IGESD2D
#define igerv2d_   IGERV2D
#define igebs2d_   IGEBS2D
#define igebr2d_   IGEBR2D
#define itrsd2d_   ITRSD2D
#define itrrv2d_   ITRRV2D
#define itrbs2d_   ITRBS2D
#define itrbr2d_   ITRBR2D
#define igsum2d_   IGSUM2D
#define igamx2d_   IGAMX2D
#define igamn2d_   IGAMN2D
#define sgesd2d_   SGESD2D
#define sgerv2d_   SGERV2D
#define sgebs2d_   SGEBS2D
#define sgebr2d_   SGEBR2D
#define strsd2d_   STRSD2D
#define strrv2d_   STRRV2D
#define strbs2d_   STRBS2D
#define strbr2d_   STRBR2D
#define sgsum2d_   SGSUM2D
#define sgamx2d_   SGAMX2D
#define sgamn2d_   SGAMN2D
#define dgesd2d_   DGESD2D
#define dgerv2d_   DGERV2D
#define dgebs2d_   DGEBS2D
#define dgebr2d_   DGEBR2D
#define dtrsd2d_   DTRSD2D
#define dtrrv2d_   DTRRV2D
#define dtrbs2d_   DTRBS2D
#define dtrbr2d_   DTRBR2D
#define dgsum2d_   DGSUM2D
#define dgamx2d_   DGAMX2D
#define dgamn2d_   DGAMN2D
#define cgesd2d_   CGESD2D
#define cgerv2d_   CGERV2D
#define cgebs2d_   CGEBS2D
#define cgebr2d_   CGEBR2D
#define ctrsd2d_   CTRSD2D
#define ctrrv2d_   CTRRV2D
#define ctrbs2d_   CTRBS2D
#define ctrbr2d_   CTRBR2D
#define cgsum2d_   CGSUM2D
#define cgamx2d_   CGAMX2D
#define cgamn2d_   CGAMN2D
#define zgesd2d_   ZGESD2D
#define zgerv2d_   ZGERV2D
#define zgebs2d_   ZGEBS2D
#define zgebr2d_   ZGEBR2D
#define ztrsd2d_   ZTRSD2D
#define ztrrv2d_   ZTRRV2D
#define ztrbs2d_   ZTRBS2D
#define ztrbr2d_   ZTRBR2D
#define zgsum2d_   ZGSUM2D
#define zgamx2d_   ZGAMX2D
#define zgamn2d_   ZGAMN2D

#elif (FORTRAN_CALL_C == FCISF2C)
/*
 * These defines set up the naming scheme required to have a fortran
 * routine call a C routine (which is what the BLACS are written in)
 * for systems where the fortran "compiler" is actually f2c (a fortran
 * to C conversion utility).
 */
/*
 * Initialization routines
 */
#define blacs_pinfo_    blacs_pinfo__
#define blacs_setup_    blacs_setup__
#define blacs_set_      blacs_set__
#define blacs_get_      blacs_get__
#define blacs_gridinit_ blacs_gridinit__
#define blacs_gridmap_  blacs_gridmap__
/*
 * Destruction routines
 */
#define blacs_freebuff_ blacs_freebuff__
#define blacs_gridexit_ blacs_gridexit__
#define blacs_abort_    blacs_abort__
#define blacs_exit_     blacs_exit__
/*
 * Informational & misc.
 */
#define blacs_gridinfo_ blacs_gridinfo__
#define blacs_pnum_     blacs_pnum__
#define blacs_pcoord_   blacs_pcoord__
#define blacs_barrier_  blacs_barrier__

#endif


#endif
/* ---------------------------------------------------------------------
*
*  -- PBLAS routine (version 2.0) --
*     University of Tennessee, Knoxville, Oak Ridge National Laboratory,
*     and University of California, Berkeley.
*     April 1, 1998
*
*  ---------------------------------------------------------------------
*/
/*
*  This file includes  BLACS  function type definitions,  define macros,
*  and function prototypes. All PBLAS routines include this file.
*
* ----------------------------------------------------------------------
*  #define macro constants
*  ---------------------------------------------------------------------
*/
                                       /* BLACS scopes and topologies */
/* #define    CALL                'A'               (already defined) */
#define    CCOLUMN             'C'
#define    CROW                'R'

#define    CBCAST              'B'
#define    CCOMBINE            'C'
#define    CTOP_GET            '!'
#define    CTOP_DEFAULT        ' '
#define    CTOP_IRING          'I'
#define    CTOP_DRING          'D'
#define    CTOP_SRING          'S'
#define    CTOP_HYPER          'H'
#define    CTOP_FULL           'F'
#define    CTOP_MRING          'M'
#define    CTOP_TTREE          'T'
#define    CTOP_TREE1          '1'
#define    CTOP_TREE2          '2'
#define    CTOP_TREE3          '3'
#define    CTOP_TREE4          '4'
#define    CTOP_TREE5          '5'
#define    CTOP_TREE6          '6'
#define    CTOP_TREE7          '7'
#define    CTOP_TREE8          '8'
#define    CTOP_TREE9          '9'

/* #define    ALL                 "A"               (already defined) */
#define    COLUMN              "C"
#define    ROW                 "R"

#define    BCAST               "B"
#define    COMBINE             "C"
#define    TOP_GET             "!"
#define    TOP_DEFAULT         " "
#define    TOP_IRING           "I"
#define    TOP_DRING           "D"
#define    TOP_SRING           "S"
#define    TOP_HYPER           "H"
#define    TOP_FULL            "F"
#define    TOP_MRING           "M"
#define    TOP_TTREE           "T"
#define    TOP_TREE1           "1"
#define    TOP_TREE2           "2"
#define    TOP_TREE3           "3"
#define    TOP_TREE4           "4"
#define    TOP_TREE5           "5"
#define    TOP_TREE6           "6"
#define    TOP_TREE7           "7"
#define    TOP_TREE8           "8"
#define    TOP_TREE9           "9"

/*
*  ---------------------------------------------------------------------
*  Function prototypes
*  ---------------------------------------------------------------------
*/
#ifdef __STDC__
                                              /* BLACS Initialization */
void           Cblacs_pinfo    ( Int *,     Int * );
void           Cblacs_setup    ( Int *,     Int * );
void           Cblacs_get      ( Int,       Int,       Int * );
void           Cblacs_set      ( Int,       Int,       Int * );
void           Cblacs_gridinit ( Int *,     char *,    Int,
                                 Int );
void           Cblacs_gridmap  ( Int *,     Int *,     Int,
                                 Int,       Int );

                                                 /* BLACS Destruction */
void           Cblacs_freebuff ( Int,       Int );
void           Cblacs_gridexit ( Int );
void           Cblacs_abort    ( Int,       Int );
void           Cblacs_exit     ( Int );

                             /* BLACS Informational and Miscellaneous */
void           Cblacs_gridinfo ( Int,       Int *,     Int *,
                                 Int *,     Int * );
Int            Cblacs_pnum     ( Int,       Int,       Int );
void           Cblacs_pcoord   ( Int,       Int,       Int *,
                                 Int * );
void           Cblacs_barrier  ( Int,       char * );

                                                     /* BLACS Sending */
void           Cigesd2d        ( Int,       Int,       Int,
                                 char *,    Int,       Int,
                                 Int );
void           Csgesd2d        ( Int,       Int,       Int,
                                 char *,    Int,       Int,
                                 Int );
void           Cdgesd2d        ( Int,       Int,       Int,
                                 char *,    Int,       Int,
                                 Int );
void           Ccgesd2d        ( Int,       Int,       Int,
                                 char *,    Int,       Int,
                                 Int );
void           Czgesd2d        ( Int,       Int,       Int,
                                 char *,    Int,       Int,
                                 Int );

void           Citrsd2d        ( Int,       char *,    char *,
                                 Int,       Int,       char *,
                                 Int,       Int,       Int );
void           Cstrsd2d        ( Int,       char *,    char *,
                                 Int,       Int,       char *,
                                 Int,       Int,       Int );
void           Cdtrsd2d        ( Int,       char *,    char *,
                                 Int,       Int,       char *,
                                 Int,       Int,       Int );
void           Cctrsd2d        ( Int,       char *,    char *,
                                 Int,       Int,       char *,
                                 Int,       Int,       Int );
void           Cztrsd2d        ( Int,       char *,    char *,
                                 Int,       Int,       char *,
                                 Int,       Int,       Int );

void           Cigebs2d        ( Int,       char *,    char *,
                                 Int,       Int,       char *,
                                 Int );
void           Csgebs2d        ( Int,       char *,    char *,
                                 Int,       Int,       char *,
                                 Int );
void           Cdgebs2d        ( Int,       char *,    char *,
                                 Int,       Int,       char *,
                                 Int );
void           Ccgebs2d        ( Int,       char *,    char *,
                                 Int,       Int,       char *,
                                 Int );
void           Czgebs2d        ( Int,       char *,    char *,
                                 Int,       Int,       char *,
                                 Int );

void           Citrbs2d        ( Int,       char *,    char *,
                                 char *,    char *,    Int,
                                 Int,       char *,    Int );
void           Cstrbs2d        ( Int,       char *,    char *,
                                 char *,    char *,    Int,
                                 Int,       char *,    Int );
void           Cdtrbs2d        ( Int,       char *,    char *,
                                 char *,    char *,    Int,
                                 Int,       char *,    Int );
void           Cctrbs2d        ( Int,       char *,    char *,
                                 char *,    char *,    Int,
                                 Int,       char *,    Int );
void           Cztrbs2d        ( Int,       char *,    char *,
                                 char *,    char *,    Int,
                                 Int,       char *,    Int );

                                                   /* BLACS Receiving */
void           Cigerv2d        ( Int,       Int,       Int,
                                 char *,    Int,       Int,
                                 Int );
void           Csgerv2d        ( Int,       Int,       Int,
                                 char *,    Int,       Int,
                                 Int );
void           Cdgerv2d        ( Int,       Int,       Int,
                                 char *,    Int,       Int,
                                 Int );
void           Ccgerv2d        ( Int,       Int,       Int,
                                 char *,    Int,       Int,
                                 Int );
void           Czgerv2d        ( Int,       Int,       Int,
                                 char *,    Int,       Int,
                                 Int );

void           Citrrv2d        ( Int,       char *,    char *,
                                 Int,       Int,       char *,
                                 Int,       Int,       Int );
void           Cstrrv2d        ( Int,       char *,    char *,
                                 Int,       Int,       char *,
                                 Int,       Int,       Int );
void           Cdtrrv2d        ( Int,       char *,    char *,
                                 Int,       Int,       char *,
                                 Int,       Int,       Int );
void           Cctrrv2d        ( Int,       char *,    char *,
                                 Int,       Int,       char *,
                                 Int,       Int,       Int );
void           Cztrrv2d        ( Int,       char *,    char *,
                                 Int,       Int,       char *,
                                 Int,       Int,       Int );

void           Cigebr2d        ( Int,       char *,    char *,
                                 Int,       Int,       char *,
                                 Int,       Int,       Int );
void           Csgebr2d        ( Int,       char *,    char *,
                                 Int,       Int,       char *,
                                 Int,       Int,       Int );
void           Cdgebr2d        ( Int,       char *,    char *,
                                 Int,       Int,       char *,
                                 Int,       Int,       Int );
void           Ccgebr2d        ( Int,       char *,    char *,
                                 Int,       Int,       char *,
                                 Int,       Int,       Int );
void           Czgebr2d        ( Int,       char *,    char *,
                                 Int,       Int,       char *,
                                 Int,       Int,       Int );

void           Citrbr2d        ( Int,       char *,    char *,
                                 char *,    char *,    Int,
                                 Int,       char *,    Int,
                                 Int,       Int );
void           Cstrbr2d        ( Int,       char *,    char *,
                                 char *,    char *,    Int,
                                 Int,       char *,    Int,
                                 Int,       Int );
void           Cdtrbr2d        ( Int,       char *,    char *,
                                 char *,    char *,    Int,
                                 Int,       char *,    Int,
                                 Int,       Int );
void           Cctrbr2d        ( Int,       char *,    char *,
                                 char *,    char *,    Int,
                                 Int,       char *,    Int,
                                 Int,       Int );
void           Cztrbr2d        ( Int,       char *,    char *,
                                 char *,    char *,    Int,
                                 Int,       char *,    Int,
                                 Int,       Int );

                                          /* BLACS Combine Operations */
void           Cigamx2d        ( Int,       char *,    char *,
                                 Int,       Int,       char *,
                                 Int,       Int *,     Int *,
                                 Int,       Int,       Int );
void           Csgamx2d        ( Int,       char *,    char *,
                                 Int,       Int,       char *,
                                 Int,       Int *,     Int *,
                                 Int,       Int,       Int );
void           Cdgamx2d        ( Int,       char *,    char *,
                                 Int,       Int,       char *,
                                 Int,       Int *,     Int *,
                                 Int,       Int,       Int );
void           Ccgamx2d        ( Int,       char *,    char *,
                                 Int,       Int,       char *,
                                 Int,       Int *,     Int *,
                                 Int,       Int,       Int );
void           Czgamx2d        ( Int,       char *,    char *,
                                 Int,       Int,       char *,
                                 Int,       Int *,     Int *,
                                 Int,       Int,       Int );

void           Cigamn2d        ( Int,       char *,    char *,
                                 Int,       Int,       char *,
                                 Int,       Int *,     Int *,
                                 Int,       Int,       Int );
void           Csgamn2d        ( Int,       char *,    char *,
                                 Int,       Int,       char *,
                                 Int,       Int *,     Int *,
                                 Int,       Int,       Int );
void           Cdgamn2d        ( Int,       char *,    char *,
                                 Int,       Int,       char *,
                                 Int,       Int *,     Int *,
                                 Int,       Int,       Int );
void           Ccgamn2d        ( Int,       char *,    char *,
                                 Int,       Int,       char *,
                                 Int,       Int *,     Int *,
                                 Int,       Int,       Int );
void           Czgamn2d        ( Int,       char *,    char *,
                                 Int,       Int,       char *,
                                 Int,       Int *,     Int *,
                                 Int,       Int,       Int );

void           Cigsum2d        ( Int,       char *,    char *,
                                 Int,       Int,       char *,
                                 Int,       Int,       Int );
void           Csgsum2d        ( Int,       char *,    char *,
                                 Int,       Int,       char *,
                                 Int,       Int,       Int );
void           Cdgsum2d        ( Int,       char *,    char *,
                                 Int,       Int,       char *,
                                 Int,       Int,       Int );
void           Ccgsum2d        ( Int,       char *,    char *,
                                 Int,       Int,       char *,
                                 Int,       Int,       Int );
void           Czgsum2d        ( Int,       char *,    char *,
                                 Int,       Int,       char *,
                                 Int,       Int,       Int );

#else
                                              /* BLACS Initialization */
void           Cblacs_pinfo    ();
void           Cblacs_setup    ();
void           Cblacs_get      ();
void           Cblacs_set      ();
void           Cblacs_gridinit ();
void           Cblacs_gridmap  ();

                                                 /* BLACS Destruction */
void           Cblacs_freebuff ();
void           Cblacs_gridexit ();
void           Cblacs_abort    ();
void           Cblacs_exit     ();

                             /* BLACS Informational and Miscellaneous */
void           Cblacs_gridinfo ();
Int            Cblacs_pnum     ();
void           Cblacs_pcoord   ();
void           Cblacs_barrier  ();

                                                     /* BLACS Sending */
void           Cigesd2d        ();
void           Csgesd2d        ();
void           Cdgesd2d        ();
void           Ccgesd2d        ();
void           Czgesd2d        ();

void           Citrsd2d        ();
void           Cstrsd2d        ();
void           Cdtrsd2d        ();
void           Cctrsd2d        ();
void           Cztrsd2d        ();

void           Cigebs2d        ();
void           Csgebs2d        ();
void           Cdgebs2d        ();
void           Ccgebs2d        ();
void           Czgebs2d        ();

void           Citrbs2d        ();
void           Cstrbs2d        ();
void           Cdtrbs2d        ();
void           Cctrbs2d        ();
void           Cztrbs2d        ();

                                                   /* BLACS Receiving */
void           Cigerv2d        ();
void           Csgerv2d        ();
void           Cdgerv2d        ();
void           Ccgerv2d        ();
void           Czgerv2d        ();

void           Citrrv2d        ();
void           Cstrrv2d        ();
void           Cdtrrv2d        ();
void           Cctrrv2d        ();
void           Cztrrv2d        ();

void           Cigebr2d        ();
void           Csgebr2d        ();
void           Cdgebr2d        ();
void           Ccgebr2d        ();
void           Czgebr2d        ();

void           Citrbr2d        ();
void           Cstrbr2d        ();
void           Cdtrbr2d        ();
void           Cctrbr2d        ();
void           Cztrbr2d        ();

                                          /* BLACS Combine Operations */
void           Cigamx2d        ();
void           Csgamx2d        ();
void           Cdgamx2d        ();
void           Ccgamx2d        ();
void           Czgamx2d        ();

void           Cigamn2d        ();
void           Csgamn2d        ();
void           Cdgamn2d        ();
void           Ccgamn2d        ();
void           Czgamn2d        ();

void           Cigsum2d        ();
void           Csgsum2d        ();
void           Cdgsum2d        ();
void           Ccgsum2d        ();
void           Czgsum2d        ();

#endif
/* ---------------------------------------------------------------------
*
*  -- PBLAS routine (version 2.0) --
*     University of Tennessee, Knoxville, Oak Ridge National Laboratory,
*     and University of California, Berkeley.
*     April 1, 1998
*
*  ---------------------------------------------------------------------
*/
/*
*  This file includes F77 BLAS definitions. All  PBLAS  routines include
*  this file.
*
*  ---------------------------------------------------------------------
*  #define macro constants
*  ---------------------------------------------------------------------
*/
#define    CNOTRAN             'N'
#define    CNOCONJG            'N'
#define    CTRAN               'T'
#define    CCONJG              'Z'
#define    CCOTRAN             'C'

#define    CALL                'A'
#define    CLOWER              'L'
#define    CUPPER              'U'
#define    CDIAGONAL           'D'

#define    CLEFT               'L'
#define    CRIGHT              'R'

#define    CUNIT               'U'
#define    CNOUNIT             'N'

#define    CINIT               'I'
#define    CNOINIT             'N'

#define    CFORWARD            'F'
#define    CBACKWARD           'B'

#define    CREUSE              'R'
#define    CALLOCATE           'A'

#define    NOTRAN              "N"
#define    NOCONJG             "N"
#define    TRAN                "T"
#define    CONJG               "Z"
#define    COTRAN              "C"

#define    ALL                 "A"
#define    LOWER               "L"
#define    UPPER               "U"
#define    DIAGONAL            "D"

#define    LEFT                "L"
#define    RIGHT               "R"

#define    UNIT                "U"
#define    NOUNIT              "N"

#define    INIT                "I"
#define    NOINIT              "N"

#define    FORWARD             "F"
#define    BACKWARD            "B"

#define    REUSE               "R"
#define    ALLOCATE            "A"

#if( _F2C_CALL_ == _F2C_ADD_ )
/*
*  These defines  set  up  the  naming scheme required to have a FORTRAN
*  routine called by a C routine. No redefinition is necessary  to  have
*  the following FORTRAN to C interface:
*
*           FORTRAN DECLARATION            C CALL
*           SUBROUTINE DGEMM(...)          dgemm_(...)
*
*  This is the PBLAS default.
*/
#endif

#if( _F2C_CALL_ == _F2C_UPCASE )
/*
*  These defines  set  up  the  naming scheme required to have a FORTRAN
*  routine called by a C routine with the following  FORTRAN to C inter-
*  face:
*
*           FORTRAN DECLARATION            C CALL
*           SUBROUTINE DGEMM(...)          DGEMM(...)
*/
#define    srot_               SROT
#define    drot_               DROT

#define    sswap_              SSWAP
#define    dswap_              DSWAP
#define    cswap_              CSWAP
#define    zswap_              ZSWAP

#define    scopy_              SCOPY
#define    dcopy_              DCOPY
#define    ccopy_              CCOPY
#define    zcopy_              ZCOPY

#define    saxpy_              SAXPY
#define    daxpy_              DAXPY
#define    caxpy_              CAXPY
#define    zaxpy_              ZAXPY

#define    sscal_              SSCAL
#define    dscal_              DSCAL
#define    cscal_              CSCAL
#define    zscal_              ZSCAL
#define    csscal_             CSSCAL
#define    zdscal_             ZDSCAL

#define    sasum_              SASUM
#define    dasum_              DASUM
#define    scasum_             SCASUM
#define    dzasum_             DZASUM

#define    snrm2_              SNRM2
#define    dnrm2_              DNRM2
#define    scnrm2_             SCNRM2
#define    dznrm2_             DZNRM2

#define    sdot_               SDOT
#define    ddot_               DDOT
#define    cdotu_              CDOTU
#define    zdotu_              ZDOTU
#define    cdotc_              CDOTC
#define    zdotc_              ZDOTC

#define    isamax_             ISAMAX
#define    idamax_             IDAMAX
#define    icamax_             ICAMAX
#define    izamax_             IZAMAX

#define    sgemv_              SGEMV
#define    dgemv_              DGEMV
#define    cgemv_              CGEMV
#define    zgemv_              ZGEMV

#define    ssymv_              SSYMV
#define    dsymv_              DSYMV
#define    chemv_              CHEMV
#define    zhemv_              ZHEMV

#define    strmv_              STRMV
#define    dtrmv_              DTRMV
#define    ctrmv_              CTRMV
#define    ztrmv_              ZTRMV

#define    strsv_              STRSV
#define    dtrsv_              DTRSV
#define    ctrsv_              CTRSV
#define    ztrsv_              ZTRSV

#define    sger_               SGER
#define    dger_               DGER
#define    cgeru_              CGERU
#define    zgeru_              ZGERU
#define    cgerc_              CGERC
#define    zgerc_              ZGERC

#define    ssyr_               SSYR
#define    dsyr_               DSYR
#define    cher_               CHER
#define    zher_               ZHER

#define    ssyr2_              SSYR2
#define    dsyr2_              DSYR2
#define    cher2_              CHER2
#define    zher2_              ZHER2

#define    sgemm_              SGEMM
#define    dgemm_              DGEMM
#define    cgemm_              CGEMM
#define    zgemm_              ZGEMM

#define    ssymm_              SSYMM
#define    dsymm_              DSYMM
#define    csymm_              CSYMM
#define    chemm_              CHEMM
#define    zsymm_              ZSYMM
#define    zhemm_              ZHEMM

#define    strmm_              STRMM
#define    dtrmm_              DTRMM
#define    ctrmm_              CTRMM
#define    ztrmm_              ZTRMM

#define    strsm_              STRSM
#define    dtrsm_              DTRSM
#define    ctrsm_              CTRSM
#define    ztrsm_              ZTRSM

#define    ssyrk_              SSYRK
#define    dsyrk_              DSYRK
#define    csyrk_              CSYRK
#define    cherk_              CHERK
#define    zsyrk_              ZSYRK
#define    zherk_              ZHERK

#define    ssyr2k_             SSYR2K
#define    dsyr2k_             DSYR2K
#define    csyr2k_             CSYR2K
#define    cher2k_             CHER2K
#define    zsyr2k_             ZSYR2K
#define    zher2k_             ZHER2K

#endif

#if( _F2C_CALL_ == _F2C_NOCHANGE )
/*
*  These defines  set  up  the  naming scheme required to have a FORTRAN
*  routine called by a C routine with the following  FORTRAN to C inter-
*  face:
*
*           FORTRAN DECLARATION            C CALL
*           SUBROUTINE DGEMM(...)          dgemm(...)
*/
#define    srot_               srot
#define    drot_               drot

#define    sswap_              sswap
#define    dswap_              dswap
#define    cswap_              cswap
#define    zswap_              zswap

#define    scopy_              scopy
#define    dcopy_              dcopy
#define    ccopy_              ccopy
#define    zcopy_              zcopy

#define    saxpy_              saxpy
#define    daxpy_              daxpy
#define    caxpy_              caxpy
#define    zaxpy_              zaxpy

#define    sscal_              sscal
#define    dscal_              dscal
#define    cscal_              cscal
#define    zscal_              zscal
#define    csscal_             csscal
#define    zdscal_             zdscal

#define    sasum_              sasum
#define    dasum_              dasum
#define    scasum_             scasum
#define    dzasum_             dzasum

#define    snrm2_              snrm2
#define    dnrm2_              dnrm2
#define    scnrm2_             scnrm2
#define    dznrm2_             dznrm2

#define    sdot_               sdot
#define    ddot_               ddot
#define    cdotu_              cdotu
#define    zdotu_              zdotu
#define    cdotc_              cdotc
#define    zdotc_              zdotc

#define    isamax_             isamax
#define    idamax_             idamax
#define    icamax_             icamax
#define    izamax_             izamax

#define    sgemv_              sgemv
#define    dgemv_              dgemv
#define    cgemv_              cgemv
#define    zgemv_              zgemv

#define    ssymv_              ssymv
#define    dsymv_              dsymv
#define    chemv_              chemv
#define    zhemv_              zhemv

#define    strmv_              strmv
#define    dtrmv_              dtrmv
#define    ctrmv_              ctrmv
#define    ztrmv_              ztrmv

#define    strsv_              strsv
#define    dtrsv_              dtrsv
#define    ctrsv_              ctrsv
#define    ztrsv_              ztrsv

#define    sger_               sger
#define    dger_               dger
#define    cgeru_              cgeru
#define    zgeru_              zgeru
#define    cgerc_              cgerc
#define    zgerc_              zgerc

#define    ssyr_               ssyr
#define    dsyr_               dsyr
#define    cher_               cher
#define    zher_               zher

#define    ssyr2_              ssyr2
#define    dsyr2_              dsyr2
#define    cher2_              cher2
#define    zher2_              zher2

#define    sgemm_              sgemm
#define    dgemm_              dgemm
#define    cgemm_              cgemm
#define    zgemm_              zgemm

#define    ssymm_              ssymm
#define    dsymm_              dsymm
#define    csymm_              csymm
#define    chemm_              chemm
#define    zsymm_              zsymm
#define    zhemm_              zhemm

#define    strmm_              strmm
#define    dtrmm_              dtrmm
#define    ctrmm_              ctrmm
#define    ztrmm_              ztrmm

#define    strsm_              strsm
#define    dtrsm_              dtrsm
#define    ctrsm_              ctrsm
#define    ztrsm_              ztrsm

#define    ssyrk_              ssyrk
#define    dsyrk_              dsyrk
#define    csyrk_              csyrk
#define    cherk_              cherk
#define    zsyrk_              zsyrk
#define    zherk_              zherk

#define    ssyr2k_             ssyr2k
#define    dsyr2k_             dsyr2k
#define    csyr2k_             csyr2k
#define    cher2k_             cher2k
#define    zsyr2k_             zsyr2k
#define    zher2k_             zher2k

#endif
/*
*  ---------------------------------------------------------------------
*  Function prototypes
*  ---------------------------------------------------------------------
*/
#ifdef __STDC__

Int            isamax_         ( Int *,     char *,    Int * );
Int            idamax_         ( Int *,     char *,    Int * );
Int            icamax_         ( Int *,     char *,    Int * );
Int            izamax_         ( Int *,     char *,    Int * );

F_VOID_FCT     saxpy_          ( Int *,     char *,    char *,
                                 Int *,     char *,    Int * );
F_VOID_FCT     daxpy_          ( Int *,     char *,    char *,
                                 Int *,     char *,    Int * );
F_VOID_FCT     caxpy_          ( Int *,     char *,    char *,
                                 Int *,     char *,    Int * );
F_VOID_FCT     zaxpy_          ( Int *,     char *,    char *,
                                 Int *,     char *,    Int * );

F_VOID_FCT     scopy_          ( Int *,     char *,    Int *,
                                 char *,    Int * );
F_VOID_FCT     dcopy_          ( Int *,     char *,    Int *,
                                 char *,    Int * );
F_VOID_FCT     ccopy_          ( Int *,     char *,    Int *,
                                 char *,    Int * );
F_VOID_FCT     zcopy_          ( Int *,     char *,    Int *,
                                 char *,    Int * );

F_VOID_FCT     sscal_          ( Int *,     char *,    char *,
                                 Int * );
F_VOID_FCT     dscal_          ( Int *,     char *,    char *,
                                 Int * );
F_VOID_FCT     cscal_          ( Int *,     char *,    char *,
                                 Int * );
F_VOID_FCT     csscal_         ( Int *,     char *,    char *,
                                 Int * );
F_VOID_FCT     zdscal_         ( Int *,     char *,    char *,
                                 Int * );
F_VOID_FCT     zscal_          ( Int *,     char *,    char *,
                                 Int * );

F_VOID_FCT     sswap_          ( Int *,     char *,    Int *,
                                 char *,    Int * );
F_VOID_FCT     dswap_          ( Int *,     char *,    Int *,
                                 char *,    Int * );
F_VOID_FCT     cswap_          ( Int *,     char *,    Int *,
                                 char *,    Int * );
F_VOID_FCT     zswap_          ( Int *,     char *,    Int *,
                                 char *,    Int * );

F_VOID_FCT     sgemv_          ( F_CHAR_T,  Int *,     Int *,
                                 char *,    char *,    Int *,
                                 char *,    Int *,     char *,
                                 char *,    Int * );
F_VOID_FCT     dgemv_          ( F_CHAR_T,  Int *,     Int *,
                                 char *,    char *,    Int *,
                                 char *,    Int *,     char *,
                                 char *,    Int * );
F_VOID_FCT     cgemv_          ( F_CHAR_T,  Int *,     Int *,
                                 char *,    char *,    Int *,
                                 char *,    Int *,     char *,
                                 char *,    Int * );
F_VOID_FCT     zgemv_          ( F_CHAR_T,  Int *,     Int *,
                                 char *,    char *,    Int *,
                                 char *,    Int *,     char *,
                                 char *,    Int * );

F_VOID_FCT     ssymv_          ( F_CHAR_T,  Int *,     char *,
                                 char *,    Int *,     char *,
                                 Int *,     char *,    char *,
                                 Int * );
F_VOID_FCT     dsymv_          ( F_CHAR_T,  Int *,     char *,
                                 char *,    Int *,     char *,
                                 Int *,     char *,    char *,
                                 Int * );
F_VOID_FCT     chemv_          ( F_CHAR_T,  Int *,     char *,
                                 char *,    Int *,     char *,
                                 Int *,     char *,    char *,
                                 Int * );
F_VOID_FCT     zhemv_          ( F_CHAR_T,  Int *,     char *,
                                 char *,    Int *,     char *,
                                 Int *,     char *,    char *,
                                 Int * );

F_VOID_FCT     strmv_          ( F_CHAR_T,  F_CHAR_T,  F_CHAR_T,
                                 Int *,     char *,    Int *,
                                 char *,    Int * );
F_VOID_FCT     dtrmv_          ( F_CHAR_T,  F_CHAR_T,  F_CHAR_T,
                                 Int *,     char *,    Int *,
                                 char *,    Int * );
F_VOID_FCT     ctrmv_          ( F_CHAR_T,  F_CHAR_T,  F_CHAR_T,
                                 Int *,     char *,    Int *,
                                 char *,    Int * );
F_VOID_FCT     ztrmv_          ( F_CHAR_T,  F_CHAR_T,  F_CHAR_T,
                                 Int *,     char *,    Int *,
                                 char *,    Int * );

F_VOID_FCT     strsv_          ( F_CHAR_T,  F_CHAR_T,  F_CHAR_T,
                                 Int *,     char *,    Int *,
                                 char *,    Int * );
F_VOID_FCT     dtrsv_          ( F_CHAR_T,  F_CHAR_T,  F_CHAR_T,
                                 Int *,     char *,    Int *,
                                 char *,    Int * );
F_VOID_FCT     ctrsv_          ( F_CHAR_T,  F_CHAR_T,  F_CHAR_T,
                                 Int *,     char *,    Int *,
                                 char *,    Int * );
F_VOID_FCT     ztrsv_          ( F_CHAR_T,  F_CHAR_T,  F_CHAR_T,
                                 Int *,     char *,    Int *,
                                 char *,    Int * );

F_VOID_FCT     sger_           ( Int *,     Int *,     char *,
                                 char *,    Int *,     char *,
                                 Int *,     char *,    Int * );
F_VOID_FCT     dger_           ( Int *,     Int *,     char *,
                                 char *,    Int *,     char *,
                                 Int *,     char *,    Int * );
F_VOID_FCT     cgerc_          ( Int *,     Int *,     char *,
                                 char *,    Int *,     char *,
                                 Int *,     char *,    Int * );
F_VOID_FCT     cgeru_          ( Int *,     Int *,     char *,
                                 char *,    Int *,     char *,
                                 Int *,     char *,    Int * );
F_VOID_FCT     zgerc_          ( Int *,     Int *,     char *,
                                 char *,    Int *,     char *,
                                 Int *,     char *,    Int * );
F_VOID_FCT     zgeru_          ( Int *,     Int *,     char *,
                                 char *,    Int *,     char *,
                                 Int *,     char *,    Int * );

F_VOID_FCT     ssyr_           ( F_CHAR_T,  Int *,     char *,
                                 char *,    Int *,     char *,
                                 Int * );
F_VOID_FCT     dsyr_           ( F_CHAR_T,  Int *,     char *,
                                 char *,    Int *,     char *,
                                 Int * );
F_VOID_FCT     cher_           ( F_CHAR_T,  Int *,     char *,
                                 char *,    Int *,     char *,
                                 Int * );
F_VOID_FCT     zher_           ( F_CHAR_T,  Int *,     char *,
                                 char *,    Int *,     char *,
                                 Int * );

F_VOID_FCT     ssyr2_          ( F_CHAR_T,  Int *,     char *,
                                 char *,    Int *,     char *,
                                 Int *,     char *,    Int * );
F_VOID_FCT     dsyr2_          ( F_CHAR_T,  Int *,     char *,
                                 char *,    Int *,     char *,
                                 Int *,     char *,    Int * );
F_VOID_FCT     cher2_          ( F_CHAR_T,  Int *,     char *,
                                 char *,    Int *,     char *,
                                 Int *,     char *,    Int * );
F_VOID_FCT     zher2_          ( F_CHAR_T,  Int *,     char *,
                                 char *,    Int *,     char *,
                                 Int *,     char *,    Int * );

F_VOID_FCT     sgemm_          ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     Int *,     char *,
                                 char *,    Int *,     char *,
                                 Int *,     char *,    char *,
                                 Int * );
F_VOID_FCT     dgemm_          ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     Int *,     char *,
                                 char *,    Int *,     char *,
                                 Int *,     char *,    char *,
                                 Int * );
F_VOID_FCT     cgemm_          ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     Int *,     char *,
                                 char *,    Int *,     char *,
                                 Int *,     char *,    char *,
                                 Int * );
F_VOID_FCT     zgemm_          ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     Int *,     char *,
                                 char *,    Int *,     char *,
                                 Int *,     char *,    char *,
                                 Int * );

F_VOID_FCT     ssymm_          ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     char *,    char *,
                                 Int *,     char *,    Int *,
                                 char *,    char *,    Int * );
F_VOID_FCT     dsymm_          ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     char *,    char *,
                                 Int *,     char *,    Int *,
                                 char *,    char *,    Int * );
F_VOID_FCT     csymm_          ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     char *,    char *,
                                 Int *,     char *,    Int *,
                                 char *,    char *,    Int * );
F_VOID_FCT     zsymm_          ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     char *,    char *,
                                 Int *,     char *,    Int *,
                                 char *,    char *,    Int * );
F_VOID_FCT     chemm_          ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     char *,    char *,
                                 Int *,     char *,    Int *,
                                 char *,    char *,    Int * );
F_VOID_FCT     zhemm_          ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     char *,    char *,
                                 Int *,     char *,    Int *,
                                 char *,    char *,    Int * );

F_VOID_FCT     ssyrk_          ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     char *,    char *,
                                 Int *,     char *,    char *,
                                 Int * );
F_VOID_FCT     dsyrk_          ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     char *,    char *,
                                 Int *,     char *,    char *,
                                 Int * );
F_VOID_FCT     csyrk_          ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     char *,    char *,
                                 Int *,     char *,    char *,
                                 Int * );
F_VOID_FCT     zsyrk_          ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     char *,    char *,
                                 Int *,     char *,    char *,
                                 Int * );
F_VOID_FCT     cherk_          ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     char *,    char *,
                                 Int *,     char *,    char *,
                                 Int * );
F_VOID_FCT     zherk_          ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     char *,    char *,
                                 Int *,     char *,    char *,
                                 Int * );

F_VOID_FCT     ssyr2k_         ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     char *,    char *,
                                 Int *,     char *,    Int *,
                                 char *,    char *,    Int * );
F_VOID_FCT     dsyr2k_         ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     char *,    char *,
                                 Int *,     char *,    Int *,
                                 char *,    char *,    Int * );
F_VOID_FCT     csyr2k_         ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     char *,    char *,
                                 Int *,     char *,    Int *,
                                 char *,    char *,    Int * );
F_VOID_FCT     zsyr2k_         ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     char *,    char *,
                                 Int *,     char *,    Int *,
                                 char *,    char *,    Int * );
F_VOID_FCT     cher2k_         ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     char *,    char *,
                                 Int *,     char *,    Int *,
                                 char *,    char *,    Int * );
F_VOID_FCT     zher2k_         ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     char *,    char *,
                                 Int *,     char *,    Int *,
                                 char *,    char *,    Int * );

F_VOID_FCT     strmm_          ( F_CHAR_T,  F_CHAR_T,  F_CHAR_T,
                                 F_CHAR_T,  Int *,     Int *,
                                 char *,    char *,    Int *,
                                 char *,    Int * );
F_VOID_FCT     dtrmm_          ( F_CHAR_T,  F_CHAR_T,  F_CHAR_T,
                                 F_CHAR_T,  Int *,     Int *,
                                 char *,    char *,    Int *,
                                 char *,    Int * );
F_VOID_FCT     ctrmm_          ( F_CHAR_T,  F_CHAR_T,  F_CHAR_T,
                                 F_CHAR_T,  Int *,     Int *,
                                 char *,    char *,    Int *,
                                 char *,    Int * );
F_VOID_FCT     ztrmm_          ( F_CHAR_T,  F_CHAR_T,  F_CHAR_T,
                                 F_CHAR_T,  Int *,     Int *,
                                 char *,    char *,    Int *,
                                 char *,    Int * );

F_VOID_FCT     strsm_          ( F_CHAR_T,  F_CHAR_T,  F_CHAR_T,
                                 F_CHAR_T,  Int *,     Int *,
                                 char *,    char *,    Int *,
                                 char *,    Int * );
F_VOID_FCT     dtrsm_          ( F_CHAR_T,  F_CHAR_T,  F_CHAR_T,
                                 F_CHAR_T,  Int *,     Int *,
                                 char *,    char *,    Int *,
                                 char *,    Int * );
F_VOID_FCT     ctrsm_          ( F_CHAR_T,  F_CHAR_T,  F_CHAR_T,
                                 F_CHAR_T,  Int *,     Int *,
                                 char *,    char *,    Int *,
                                 char *,    Int * );
F_VOID_FCT     ztrsm_          ( F_CHAR_T,  F_CHAR_T,  F_CHAR_T,
                                 F_CHAR_T,  Int *,     Int *,
                                 char *,    char *,    Int *,
                                 char *,    Int * );

#else

Int            isamax_         ();
Int            idamax_         ();
Int            icamax_         ();
Int            izamax_         ();

F_VOID_FCT     saxpy_          ();
F_VOID_FCT     daxpy_          ();
F_VOID_FCT     caxpy_          ();
F_VOID_FCT     zaxpy_          ();

F_VOID_FCT     scopy_          ();
F_VOID_FCT     dcopy_          ();
F_VOID_FCT     ccopy_          ();
F_VOID_FCT     zcopy_          ();

F_VOID_FCT     sscal_          ();
F_VOID_FCT     dscal_          ();
F_VOID_FCT     cscal_          ();
F_VOID_FCT     csscal_         ();
F_VOID_FCT     zscal_          ();
F_VOID_FCT     zdscal_         ();

F_VOID_FCT     sswap_          ();
F_VOID_FCT     dswap_          ();
F_VOID_FCT     cswap_          ();
F_VOID_FCT     zswap_          ();

F_VOID_FCT     sgemv_          ();
F_VOID_FCT     dgemv_          ();
F_VOID_FCT     cgemv_          ();
F_VOID_FCT     zgemv_          ();

F_VOID_FCT     ssymv_          ();
F_VOID_FCT     dsymv_          ();
F_VOID_FCT     chemv_          ();
F_VOID_FCT     zhemv_          ();

F_VOID_FCT     strmv_          ();
F_VOID_FCT     dtrmv_          ();
F_VOID_FCT     ctrmv_          ();
F_VOID_FCT     ztrmv_          ();

F_VOID_FCT     strsv_          ();
F_VOID_FCT     dtrsv_          ();
F_VOID_FCT     ctrsv_          ();
F_VOID_FCT     ztrsv_          ();

F_VOID_FCT     sger_           ();
F_VOID_FCT     dger_           ();
F_VOID_FCT     cgerc_          ();
F_VOID_FCT     cgeru_          ();
F_VOID_FCT     zgerc_          ();
F_VOID_FCT     zgeru_          ();

F_VOID_FCT     ssyr_           ();
F_VOID_FCT     dsyr_           ();
F_VOID_FCT     cher_           ();
F_VOID_FCT     zher_           ();

F_VOID_FCT     ssyr2_          ();
F_VOID_FCT     dsyr2_          ();
F_VOID_FCT     cher2_          ();
F_VOID_FCT     zher2_          ();

F_VOID_FCT     sgemm_          ();
F_VOID_FCT     dgemm_          ();
F_VOID_FCT     cgemm_          ();
F_VOID_FCT     zgemm_          ();

F_VOID_FCT     ssymm_          ();
F_VOID_FCT     dsymm_          ();
F_VOID_FCT     csymm_          ();
F_VOID_FCT     zsymm_          ();
F_VOID_FCT     chemm_          ();
F_VOID_FCT     zhemm_          ();

F_VOID_FCT     ssyrk_          ();
F_VOID_FCT     dsyrk_          ();
F_VOID_FCT     csyrk_          ();
F_VOID_FCT     zsyrk_          ();
F_VOID_FCT     cherk_          ();
F_VOID_FCT     zherk_          ();

F_VOID_FCT     ssyr2k_         ();
F_VOID_FCT     dsyr2k_         ();
F_VOID_FCT     csyr2k_         ();
F_VOID_FCT     zsyr2k_         ();
F_VOID_FCT     cher2k_         ();
F_VOID_FCT     zher2k_         ();

F_VOID_FCT     strmm_          ();
F_VOID_FCT     dtrmm_          ();
F_VOID_FCT     ctrmm_          ();
F_VOID_FCT     ztrmm_          ();

F_VOID_FCT     strsm_          ();
F_VOID_FCT     dtrsm_          ();
F_VOID_FCT     ctrsm_          ();
F_VOID_FCT     ztrsm_          ();

#endif
/* ---------------------------------------------------------------------
*
*  -- PBLAS routine (version 2.0) --
*     University of Tennessee, Knoxville, Oak Ridge National Laboratory,
*     and University of California, Berkeley.
*     April 1, 1998
*
*  ---------------------------------------------------------------------
*/
/*
*  This file includes PBLAS definitions. All PBLAS routines include this
*  file.
*
*  ---------------------------------------------------------------------
*  #define macro constants
*  ---------------------------------------------------------------------
*/
#if( _F2C_CALL_ == _F2C_ADD_ )
/*
*  These defines  set  up  the  naming scheme required to have a FORTRAN
*  routine call a C routine. No redefinition is necessary  to  have  the
*  following FORTRAN to C interface:
*
*           FORTRAN CALL                   C DECLARATION
*           CALL PDGEMM(...)               void pdgemm_(...)
*
*  This is the PBLAS default.
*/
#define    PB_freebuf_         PB_freebuf_
#define    PB_topget_          pb_topget_
#define    PB_topset_          pb_topset_

#endif

#if( _F2C_CALL_ == _F2C_UPCASE )
/*
*  These defines  set  up  the  naming scheme required to have a FORTRAN
*  routine call a C routine. No redefinition is necessary  to  have  the
*  following FORTRAN to C interface:
*
*           FORTRAN CALL                   C DECLARATION
*           CALL PDGEMM(...)               void PDGEMM(...)
*/
#define    pilaenv_            PILAENV
#define    PB_freebuf_         PB_FREEBUF
#define    PB_topget_          PB_TOPGET
#define    PB_topset_          PB_TOPSET
                                                     /* Level-1 PBLAS */
#define    picopy_             PICOPY
#define    pscopy_             PSCOPY
#define    pdcopy_             PDCOPY
#define    pccopy_             PCCOPY
#define    pzcopy_             PZCOPY

#define    psswap_             PSSWAP
#define    pdswap_             PDSWAP
#define    pcswap_             PCSWAP
#define    pzswap_             PZSWAP

#define    psaxpy_             PSAXPY
#define    pdaxpy_             PDAXPY
#define    pcaxpy_             PCAXPY
#define    pzaxpy_             PZAXPY

#define    psscal_             PSSCAL
#define    pdscal_             PDSCAL
#define    pcscal_             PCSCAL
#define    pzscal_             PZSCAL
#define    pcsscal_            PCSSCAL
#define    pzdscal_            PZDSCAL

#define    psasum_             PSASUM
#define    pdasum_             PDASUM
#define    pscasum_            PSCASUM
#define    pdzasum_            PDZASUM

#define    psnrm2_             PSNRM2
#define    pdnrm2_             PDNRM2
#define    pscnrm2_            PSCNRM2
#define    pdznrm2_            PDZNRM2

#define    psdot_              PSDOT
#define    pddot_              PDDOT
#define    pcdotu_             PCDOTU
#define    pzdotu_             PZDOTU
#define    pcdotc_             PCDOTC
#define    pzdotc_             PZDOTC

#define    psamax_             PSAMAX
#define    pdamax_             PDAMAX
#define    pcamax_             PCAMAX
#define    pzamax_             PZAMAX

#define    psgemv_             PSGEMV
#define    pdgemv_             PDGEMV
#define    pcgemv_             PCGEMV
#define    pzgemv_             PZGEMV

#define    psagemv_            PSAGEMV
#define    pdagemv_            PDAGEMV
#define    pcagemv_            PCAGEMV
#define    pzagemv_            PZAGEMV

#define    pssymv_             PSSYMV
#define    pdsymv_             PDSYMV
#define    pchemv_             PCHEMV
#define    pzhemv_             PZHEMV

#define    psasymv_            PSASYMV
#define    pdasymv_            PDASYMV
#define    pcahemv_            PCAHEMV
#define    pzahemv_            PZAHEMV

#define    pstrmv_             PSTRMV
#define    pdtrmv_             PDTRMV
#define    pctrmv_             PCTRMV
#define    pztrmv_             PZTRMV

#define    psatrmv_            PSATRMV
#define    pdatrmv_            PDATRMV
#define    pcatrmv_            PCATRMV
#define    pzatrmv_            PZATRMV

#define    pstrsv_             PSTRSV
#define    pdtrsv_             PDTRSV
#define    pctrsv_             PCTRSV
#define    pztrsv_             PZTRSV

#define    psger_              PSGER
#define    pdger_              PDGER
#define    pcgeru_             PCGERU
#define    pzgeru_             PZGERU
#define    pcgerc_             PCGERC
#define    pzgerc_             PZGERC

#define    pssyr_              PSSYR
#define    pdsyr_              PDSYR
#define    pcher_              PCHER
#define    pzher_              PZHER

#define    pssyr2_             PSSYR2
#define    pdsyr2_             PDSYR2
#define    pcher2_             PCHER2
#define    pzher2_             PZHER2

#define    psgemm_             PSGEMM
#define    pdgemm_             PDGEMM
#define    pcgemm_             PCGEMM
#define    pzgemm_             PZGEMM

#define    psgeadd_            PSGEADD
#define    pdgeadd_            PDGEADD
#define    pcgeadd_            PCGEADD
#define    pzgeadd_            PZGEADD

#define    pssymm_             PSSYMM
#define    pdsymm_             PDSYMM
#define    pcsymm_             PCSYMM
#define    pchemm_             PCHEMM
#define    pzsymm_             PZSYMM
#define    pzhemm_             PZHEMM

#define    pstrmm_             PSTRMM
#define    pdtrmm_             PDTRMM
#define    pctrmm_             PCTRMM
#define    pztrmm_             PZTRMM

#define    pstrsm_             PSTRSM
#define    pdtrsm_             PDTRSM
#define    pctrsm_             PCTRSM
#define    pztrsm_             PZTRSM

#define    pssyrk_             PSSYRK
#define    pdsyrk_             PDSYRK
#define    pcsyrk_             PCSYRK
#define    pcherk_             PCHERK
#define    pzsyrk_             PZSYRK
#define    pzherk_             PZHERK

#define    pssyr2k_            PSSYR2K
#define    pdsyr2k_            PDSYR2K
#define    pcsyr2k_            PCSYR2K
#define    pcher2k_            PCHER2K
#define    pzsyr2k_            PZSYR2K
#define    pzher2k_            PZHER2K

#define    pstradd_            PSTRADD
#define    pdtradd_            PDTRADD
#define    pctradd_            PCTRADD
#define    pztradd_            PZTRADD

#define    pstran_             PSTRAN
#define    pdtran_             PDTRAN
#define    pctranu_            PCTRANU
#define    pztranu_            PZTRANU
#define    pctranc_            PCTRANC
#define    pztranc_            PZTRANC

#endif

#if( _F2C_CALL_ == _F2C_NOCHANGE )
/*
*  These defines  set  up  the  naming scheme required to have a FORTRAN
*  routine call a C routine with the following  FORTRAN to C interface:
*
*           FORTRAN CALL                   C DECLARATION
*           CALLL PDGEMM(...)              void pdgemm(...)
*/
#define    pilaenv_            pilaenv
#define    PB_freebuf_         PB_freebuf
#define    PB_topget_          pb_topget
#define    PB_topset_          pb_topset

#define    picopy_             picopy
#define    pscopy_             pscopy
#define    pdcopy_             pdcopy
#define    pccopy_             pccopy
#define    pzcopy_             pzcopy

#define    psswap_             psswap
#define    pdswap_             pdswap
#define    pcswap_             pcswap
#define    pzswap_             pzswap

#define    psaxpy_             psaxpy
#define    pdaxpy_             pdaxpy
#define    pcaxpy_             pcaxpy
#define    pzaxpy_             pzaxpy

#define    psscal_             psscal
#define    pdscal_             pdscal
#define    pcscal_             pcscal
#define    pzscal_             pzscal
#define    pcsscal_            pcsscal
#define    pzdscal_            pzdscal

#define    psasum_             psasum
#define    pdasum_             pdasum
#define    pscasum_            pscasum
#define    pdzasum_            pdzasum

#define    psnrm2_             psnrm2
#define    pdnrm2_             pdnrm2
#define    pscnrm2_            pscnrm2
#define    pdznrm2_            pdznrm2

#define    psdot_              psdot
#define    pddot_              pddot
#define    pcdotu_             pcdotu
#define    pzdotu_             pzdotu
#define    pcdotc_             pcdotc
#define    pzdotc_             pzdotc

#define    psamax_             psamax
#define    pdamax_             pdamax
#define    pcamax_             pcamax
#define    pzamax_             pzamax

#define    psgemv_             psgemv
#define    pdgemv_             pdgemv
#define    pcgemv_             pcgemv
#define    pzgemv_             pzgemv

#define    psagemv_            psagemv
#define    pdagemv_            pdagemv
#define    pcagemv_            pcagemv
#define    pzagemv_            pzagemv

#define    pssymv_             pssymv
#define    pdsymv_             pdsymv
#define    pchemv_             pchemv
#define    pzhemv_             pzhemv

#define    psasymv_            psasymv
#define    pdasymv_            pdasymv
#define    pcahemv_            pcahemv
#define    pzahemv_            pzahemv

#define    pstrmv_             pstrmv
#define    pdtrmv_             pdtrmv
#define    pctrmv_             pctrmv
#define    pztrmv_             pztrmv

#define    psatrmv_            psatrmv
#define    pdatrmv_            pdatrmv
#define    pcatrmv_            pcatrmv
#define    pzatrmv_            pzatrmv

#define    pstrsv_             pstrsv
#define    pdtrsv_             pdtrsv
#define    pctrsv_             pctrsv
#define    pztrsv_             pztrsv

#define    psger_              psger
#define    pdger_              pdger
#define    pcgeru_             pcgeru
#define    pzgeru_             pzgeru
#define    pcgerc_             pcgerc
#define    pzgerc_             pzgerc

#define    pssyr_              pssyr
#define    pdsyr_              pdsyr
#define    pcher_              pcher
#define    pzher_              pzher

#define    pssyr2_             pssyr2
#define    pdsyr2_             pdsyr2
#define    pcher2_             pcher2
#define    pzher2_             pzher2

#define    psgeadd_            psgeadd
#define    pdgeadd_            pdgeadd
#define    pcgeadd_            pcgeadd
#define    pzgeadd_            pzgeadd

#define    psgemm_             psgemm
#define    pdgemm_             pdgemm
#define    pcgemm_             pcgemm
#define    pzgemm_             pzgemm

#define    pssymm_             pssymm
#define    pdsymm_             pdsymm
#define    pcsymm_             pcsymm
#define    pchemm_             pchemm
#define    pzsymm_             pzsymm
#define    pzhemm_             pzhemm

#define    pstrmm_             pstrmm
#define    pdtrmm_             pdtrmm
#define    pctrmm_             pctrmm
#define    pztrmm_             pztrmm

#define    pstrsm_             pstrsm
#define    pdtrsm_             pdtrsm
#define    pctrsm_             pctrsm
#define    pztrsm_             pztrsm

#define    pssyrk_             pssyrk
#define    pdsyrk_             pdsyrk
#define    pcsyrk_             pcsyrk
#define    pcherk_             pcherk
#define    pzsyrk_             pzsyrk
#define    pzherk_             pzherk

#define    pssyr2k_            pssyr2k
#define    pdsyr2k_            pdsyr2k
#define    pcsyr2k_            pcsyr2k
#define    pcher2k_            pcher2k
#define    pzsyr2k_            pzsyr2k
#define    pzher2k_            pzher2k

#define    pstradd_            pstradd
#define    pdtradd_            pdtradd
#define    pctradd_            pctradd
#define    pztradd_            pztradd

#define    pstran_             pstran
#define    pdtran_             pdtran
#define    pctranu_            pctranu
#define    pztranu_            pztranu
#define    pctranc_            pctranc
#define    pztranc_            pztranc

#endif

#if( _F2C_CALL_ == _F2C_F77ISF2C )

#define    PB_freebuf_         PB_freebuf__
#define    PB_topget_          pb_topget__
#define    PB_topset_          pb_topset__

#endif
/*
*  ---------------------------------------------------------------------
*  Function prototypes
*  ---------------------------------------------------------------------
*/
#ifdef __STDC__

void           PB_freebuf_     ( void );

void           PB_topget_      ( Int *,     F_CHAR_T,  F_CHAR_T,
                                 F_CHAR_T );

void           PB_topset_      ( Int *,     F_CHAR_T,  F_CHAR_T,
                                 F_CHAR_T );

void           picopy_         ( Int *,     Int *,     Int *,
                                 Int *,     Int *,     Int *,
                                 Int *,     Int *,     Int *,
                                 Int *,     Int * );
void           pscopy_         ( Int *,     float *,   Int *,
                                 Int *,     Int *,     Int *,
                                 float *,   Int *,     Int *,
                                 Int *,     Int * );
void           pdcopy_         ( Int *,     double *,  Int *,
                                 Int *,     Int *,     Int *,
                                 double *,  Int *,     Int *,
                                 Int *,     Int * );
void           pccopy_         ( Int *,     float *,   Int *,
                                 Int *,     Int *,     Int *,
                                 float *,   Int *,     Int *,
                                 Int *,     Int * );
void           pzcopy_         ( Int *,     double *,  Int *,
                                 Int *,     Int *,     Int *,
                                 double *,  Int *,     Int *,
                                 Int *,     Int * );

void           psswap_         ( Int *,     float *,   Int *,
                                 Int *,     Int *,     Int *,
                                 float *,   Int *,     Int *,
                                 Int *,     Int * );
void           pdswap_         ( Int *,     double *,  Int *,
                                 Int *,     Int *,     Int *,
                                 double *,  Int *,     Int *,
                                 Int *,     Int * );
void           pcswap_         ( Int *,     float *,   Int *,
                                 Int *,     Int *,     Int *,
                                 float *,   Int *,     Int *,
                                 Int *,     Int * );
void           pzswap_         ( Int *,     double *,  Int *,
                                 Int *,     Int *,     Int *,
                                 double *,  Int *,     Int *,
                                 Int *,     Int * );

void           psaxpy_         ( Int *,     float *,   float *,
                                 Int *,     Int *,     Int *,
                                 Int *,     float *,   Int *,
                                 Int *,     Int *,     Int * );
void           pdaxpy_         ( Int *,     double *,  double *,
                                 Int *,     Int *,     Int *,
                                 Int *,     double *,  Int *,
                                 Int *,     Int *,     Int * );
void           pcaxpy_         ( Int *,     float *,   float *,
                                 Int *,     Int *,     Int *,
                                 Int *,     float *,   Int *,
                                 Int *,     Int *,     Int * );
void           pzaxpy_         ( Int *,     double *,  double *,
                                 Int *,     Int *,     Int *,
                                 Int *,     double *,  Int *,
                                 Int *,     Int *,     Int * );

void           psscal_         ( Int *,     float *,   float *,
                                 Int *,     Int *,     Int *,
                                 Int * );
void           pdscal_         ( Int *,     double *,  double *,
                                 Int *,     Int *,     Int *,
                                 Int * );
void           pcscal_         ( Int *,     float *,   float *,
                                 Int *,     Int *,     Int *,
                                 Int * );
void           pcsscal_        ( Int *,     float *,   float *,
                                 Int *,     Int *,     Int *,
                                 Int * );
void           pzscal_         ( Int *,     double *,  double *,
                                 Int *,     Int *,     Int *,
                                 Int * );
void           pzdscal_        ( Int *,     double *,  double *,
                                 Int *,     Int *,     Int *,
                                 Int * );

void           psasum_         ( Int *,     float *,   float *,
                                 Int *,     Int *,     Int *,
                                 Int * );
void           pdasum_         ( Int *,     double *,  double *,
                                 Int *,     Int *,     Int *,
                                 Int * );
void           pscasum_        ( Int *,     float *,   float *,
                                 Int *,     Int *,     Int *,
                                 Int * );
void           pdzasum_        ( Int *,     double *,  double *,
                                 Int *,     Int *,     Int *,
                                 Int * );

void           psnrm2_         ( Int *,     float *,   float *,
                                 Int *,     Int *,     Int *,
                                 Int * );
void           pdnrm2_         ( Int *,     double *,  double *,
                                 Int *,     Int *,     Int *,
                                 Int * );
void           pscnrm2_        ( Int *,     float *,   float *,
                                 Int *,     Int *,     Int *,
                                 Int * );
void           pdznrm2_        ( Int *,     double *,  double *,
                                 Int *,     Int *,     Int *,
                                 Int * );

void           psdot_          ( Int *,     float *,   float *,
                                 Int *,     Int *,     Int *,
                                 Int *,     float *,   Int *,
                                 Int *,     Int *,     Int * );
void           pddot_          ( Int *,     double *,  double *,
                                 Int *,     Int *,     Int *,
                                 Int *,     double *,  Int *,
                                 Int *,     Int *,     Int * );
void           pcdotc_         ( Int *,     float *,   float *,
                                 Int *,     Int *,     Int *,
                                 Int *,     float *,   Int *,
                                 Int *,     Int *,     Int * );
void           pcdotu_         ( Int *,     float *,   float *,
                                 Int *,     Int *,     Int *,
                                 Int *,     float *,   Int *,
                                 Int *,     Int *,     Int * );
void           pzdotc_         ( Int *,     double *,  double *,
                                 Int *,     Int *,     Int *,
                                 Int *,     double *,  Int *,
                                 Int *,     Int *,     Int * );
void           pzdotu_         ( Int *,     double *,  double *,
                                 Int *,     Int *,     Int *,
                                 Int *,     double *,  Int *,
                                 Int *,     Int *,     Int * );

void           psamax_         ( Int *,     float *,   Int *,
                                 float *,   Int *,     Int *,
                                 Int *,     Int * );
void           pdamax_         ( Int *,     double *,  Int *,
                                 double *,  Int *,     Int *,
                                 Int *,     Int * );
void           pcamax_         ( Int *,     float *,   Int *,
                                 float *,   Int *,     Int *,
                                 Int *,     Int * );
void           pzamax_         ( Int *,     double *,  Int *,
                                 double *,  Int *,     Int *,
                                 Int *,     Int * );

void           psgemv_         ( F_CHAR_T,  Int *,     Int *,
                                 float *,   float *,   Int *,
                                 Int *,     Int *,     float *,
                                 Int *,     Int *,     Int *,
                                 Int *,     float *,   float *,
                                 Int *,     Int *,     Int *,
                                 Int * );
void           pdgemv_         ( F_CHAR_T,  Int *,     Int *,
                                 double *,  double *,  Int *,
                                 Int *,     Int *,     double *,
                                 Int *,     Int *,     Int *,
                                 Int *,     double *,  double *,
                                 Int *,     Int *,     Int *,
                                 Int * );
void           pcgemv_         ( F_CHAR_T,  Int *,     Int *,
                                 float *,   float *,   Int *,
                                 Int *,     Int *,     float *,
                                 Int *,     Int *,     Int *,
                                 Int *,     float *,   float *,
                                 Int *,     Int *,     Int *,
                                 Int * );
void           pzgemv_         ( F_CHAR_T,  Int *,     Int *,
                                 double *,  double *,  Int *,
                                 Int *,     Int *,     double *,
                                 Int *,     Int *,     Int *,
                                 Int *,     double *,  double *,
                                 Int *,     Int *,     Int *,
                                 Int * );

void           psagemv_        ( F_CHAR_T,  Int *,     Int *,
                                 float *,   float *,   Int *,
                                 Int *,     Int *,     float *,
                                 Int *,     Int *,     Int *,
                                 Int *,     float *,   float *,
                                 Int *,     Int *,     Int *,
                                 Int * );
void           pdagemv_        ( F_CHAR_T,  Int *,     Int *,
                                 double *,  double *,  Int *,
                                 Int *,     Int *,     double *,
                                 Int *,     Int *,     Int *,
                                 Int *,     double *,  double *,
                                 Int *,     Int *,     Int *,
                                 Int * );
void           pcagemv_        ( F_CHAR_T,  Int *,     Int *,
                                 float *,   float *,   Int *,
                                 Int *,     Int *,     float *,
                                 Int *,     Int *,     Int *,
                                 Int *,     float *,   float *,
                                 Int *,     Int *,     Int *,
                                 Int * );
void           pzagemv_        ( F_CHAR_T,  Int *,     Int *,
                                 double *,  double *,  Int *,
                                 Int *,     Int *,     double *,
                                 Int *,     Int *,     Int *,
                                 Int *,     double *,  double *,
                                 Int *,     Int *,     Int *,
                                 Int * );

void           psger_          ( Int *,     Int *,     float *,
                                 float *,   Int *,     Int *,
                                 Int *,     Int *,     float *,
                                 Int *,     Int *,     Int *,
                                 Int *,     float *,   Int *,
                                 Int *,     Int * );
void           pdger_          ( Int *,     Int *,     double *,
                                 double *,  Int *,     Int *,
                                 Int *,     Int *,     double *,
                                 Int *,     Int *,     Int *,
                                 Int *,     double *,  Int *,
                                 Int *,     Int * );
void           pcgerc_         ( Int *,     Int *,     float *,
                                 float *,   Int *,     Int *,
                                 Int *,     Int *,     float *,
                                 Int *,     Int *,     Int *,
                                 Int *,     float *,   Int *,
                                 Int *,     Int * );
void           pcgeru_         ( Int *,     Int *,     float *,
                                 float *,   Int *,     Int *,
                                 Int *,     Int *,     float *,
                                 Int *,     Int *,     Int *,
                                 Int *,     float *,   Int *,
                                 Int *,     Int * );
void           pzgerc_         ( Int *,     Int *,     double *,
                                 double *,  Int *,     Int *,
                                 Int *,     Int *,     double *,
                                 Int *,     Int *,     Int *,
                                 Int *,     double *,  Int *,
                                 Int *,     Int * );
void           pzgeru_         ( Int *,     Int *,     double *,
                                 double *,  Int *,     Int *,
                                 Int *,     Int *,     double *,
                                 Int *,     Int *,     Int *,
                                 Int *,     double *,  Int *,
                                 Int *,     Int * );

void           pssymv_         ( F_CHAR_T,  Int *,     float *,
                                 float *,   Int *,     Int *,
                                 Int *,     float *,   Int *,
                                 Int *,     Int *,     Int *,
                                 float *,   float *,   Int *,
                                 Int *,     Int *,     Int * );
void           pdsymv_         ( F_CHAR_T,  Int *,     double *,
                                 double *,  Int *,     Int *,
                                 Int *,     double *,  Int *,
                                 Int *,     Int *,     Int *,
                                 double *,  double *,  Int *,
                                 Int *,     Int *,     Int * );
void           pchemv_         ( F_CHAR_T,  Int *,     float *,
                                 float *,   Int *,     Int *,
                                 Int *,     float *,   Int *,
                                 Int *,     Int *,     Int *,
                                 float *,   float *,   Int *,
                                 Int *,     Int *,     Int * );
void           pzhemv_         ( F_CHAR_T,  Int *,     double *,
                                 double *,  Int *,     Int *,
                                 Int *,     double *,  Int *,
                                 Int *,     Int *,     Int *,
                                 double *,  double *,  Int *,
                                 Int *,     Int *,     Int * );

void           psasymv_        ( F_CHAR_T,  Int *,     float *,
                                 float *,   Int *,     Int *,
                                 Int *,     float *,   Int *,
                                 Int *,     Int *,     Int *,
                                 float *,   float *,   Int *,
                                 Int *,     Int *,     Int * );
void           pdasymv_        ( F_CHAR_T,  Int *,     double *,
                                 double *,  Int *,     Int *,
                                 Int *,     double *,  Int *,
                                 Int *,     Int *,     Int *,
                                 double *,  double *,  Int *,
                                 Int *,     Int *,     Int * );
void           pcahemv_        ( F_CHAR_T,  Int *,     float *,
                                 float *,   Int *,     Int *,
                                 Int *,     float *,   Int *,
                                 Int *,     Int *,     Int *,
                                 float *,   float *,   Int *,
                                 Int *,     Int *,     Int * );
void           pzahemv_        ( F_CHAR_T,  Int *,     double *,
                                 double *,  Int *,     Int *,
                                 Int *,     double *,  Int *,
                                 Int *,     Int *,     Int *,
                                 double *,  double *,  Int *,
                                 Int *,     Int *,     Int * );

void           pssyr_          ( F_CHAR_T,  Int *,     float *,
                                 float *,   Int *,     Int *,
                                 Int *,     Int *,     float *,
                                 Int *,     Int *,     Int * );
void           pdsyr_          ( F_CHAR_T,  Int *,     double *,
                                 double *,  Int *,     Int *,
                                 Int *,     Int *,     double *,
                                 Int *,     Int *,     Int * );
void           pcher_          ( F_CHAR_T,  Int *,     float *,
                                 float *,   Int *,     Int *,
                                 Int *,     Int *,     float *,
                                 Int *,     Int *,     Int * );
void           pzher_          ( F_CHAR_T,  Int *,     double *,
                                 double *,  Int *,     Int *,
                                 Int *,     Int *,     double *,
                                 Int *,     Int *,     Int * );

void           pssyr2_         ( F_CHAR_T,  Int *,     float *,
                                 float *,   Int *,     Int *,
                                 Int *,     Int *,     float *,
                                 Int *,     Int *,     Int *,
                                 Int *,     float *,   Int *,
                                 Int *,     Int * );
void           pdsyr2_         ( F_CHAR_T,  Int *,     double *,
                                 double *,  Int *,     Int *,
                                 Int *,     Int *,     double *,
                                 Int *,     Int *,     Int *,
                                 Int *,     double *,  Int *,
                                 Int *,     Int * );
void           pcher2_         ( F_CHAR_T,  Int *,     float *,
                                 float *,   Int *,     Int *,
                                 Int *,     Int *,     float *,
                                 Int *,     Int *,     Int *,
                                 Int *,     float *,   Int *,
                                 Int *,     Int * );
void           pzher2_         ( F_CHAR_T,  Int *,     double *,
                                 double *,  Int *,     Int *,
                                 Int *,     Int *,     double *,
                                 Int *,     Int *,     Int *,
                                 Int *,     double *,  Int *,
                                 Int *,     Int * );

void           pstrmv_         ( F_CHAR_T,  F_CHAR_T,  F_CHAR_T,
                                 Int *,     float *,   Int *,
                                 Int *,     Int *,     float *,
                                 Int *,     Int *,     Int *,
                                 Int * );
void           pdtrmv_         ( F_CHAR_T,  F_CHAR_T,  F_CHAR_T,
                                 Int *,     double *,  Int *,
                                 Int *,     Int *,     double *,
                                 Int *,     Int *,     Int *,
                                 Int * );
void           pctrmv_         ( F_CHAR_T,  F_CHAR_T,  F_CHAR_T,
                                 Int *,     float *,   Int *,
                                 Int *,     Int *,     float *,
                                 Int *,     Int *,     Int *,
                                 Int * );
void           pztrmv_         ( F_CHAR_T,  F_CHAR_T,  F_CHAR_T,
                                 Int *,     double *,  Int *,
                                 Int *,     Int *,     double *,
                                 Int *,     Int *,     Int *,
                                 Int * );

void           psatrmv_        ( F_CHAR_T,  F_CHAR_T,  F_CHAR_T,
                                 Int *,     float *,   float *,
                                 Int *,     Int *,     Int *,
                                 float *,   Int *,     Int *,
                                 Int *,     Int *,     float *,
                                 float *,   Int *,     Int *,
                                 Int *,     Int * );
void           pdatrmv_        ( F_CHAR_T,  F_CHAR_T,  F_CHAR_T,
                                 Int *,     double *,  double *,
                                 Int *,     Int *,     Int *,
                                 double *,  Int *,     Int *,
                                 Int *,     Int *,     double *,
                                 double *,  Int *,     Int *,
                                 Int *,     Int * );
void           pcatrmv_        ( F_CHAR_T,  F_CHAR_T,  F_CHAR_T,
                                 Int *,     float *,   float *,
                                 Int *,     Int *,     Int *,
                                 float *,   Int *,     Int *,
                                 Int *,     Int *,     float *,
                                 float *,   Int *,     Int *,
                                 Int *,     Int * );
void           pzatrmv_        ( F_CHAR_T,  F_CHAR_T,  F_CHAR_T,
                                 Int *,     double *,  double *,
                                 Int *,     Int *,     Int *,
                                 double *,  Int *,     Int *,
                                 Int *,     Int *,     double *,
                                 double *,  Int *,     Int *,
                                 Int *,     Int * );

void           pstrsv_         ( F_CHAR_T,  F_CHAR_T,  F_CHAR_T,
                                 Int *,     float *,   Int *,
                                 Int *,     Int *,     float *,
                                 Int *,     Int *,     Int *,
                                 Int * );
void           pdtrsv_         ( F_CHAR_T,  F_CHAR_T,  F_CHAR_T,
                                 Int *,     double *,  Int *,
                                 Int *,     Int *,     double *,
                                 Int *,     Int *,     Int *,
                                 Int * );
void           pctrsv_         ( F_CHAR_T,  F_CHAR_T,  F_CHAR_T,
                                 Int *,     float *,   Int *,
                                 Int *,     Int *,     float *,
                                 Int *,     Int *,     Int *,
                                 Int * );
void           pztrsv_         ( F_CHAR_T,  F_CHAR_T,  F_CHAR_T,
                                 Int *,     double *,  Int *,
                                 Int *,     Int *,     double *,
                                 Int *,     Int *,     Int *,
                                 Int * );

void           psgeadd_        ( F_CHAR_T,  Int *,     Int *,
                                 float *,   float *,   Int *,
                                 Int *,     Int *,     float *,
                                 float *,   Int *,     Int *,
                                 Int * );
void           pdgeadd_        ( F_CHAR_T,  Int *,     Int *,
                                 double *,  double *,  Int *,
                                 Int *,     Int *,     double *,
                                 double *,  Int *,     Int *,
                                 Int * );
void           pcgeadd_        ( F_CHAR_T,  Int *,     Int *,
                                 float *,   float *,   Int *,
                                 Int *,     Int *,     float *,
                                 float *,   Int *,     Int *,
                                 Int * );
void           pzgeadd_        ( F_CHAR_T,  Int *,     Int *,
                                 double *,  double *,  Int *,
                                 Int *,     Int *,     double *,
                                 double *,  Int *,     Int *,
                                 Int * );

void           psgemm_         ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     Int *,     float *,
                                 float *,   Int *,     Int *,
                                 Int *,     float *,   Int *,
                                 Int *,     Int *,     float *,
                                 float *,   Int *,     Int *,
                                 Int * );
void           pdgemm_         ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     Int *,     double *,
                                 double *,  Int *,     Int *,
                                 Int *,     double *,  Int *,
                                 Int *,     Int *,     double *,
                                 double *,  Int *,     Int *,
                                 Int * );
void           pcgemm_         ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     Int *,     float *,
                                 float *,   Int *,     Int *,
                                 Int *,     float *,   Int *,
                                 Int *,     Int *,     float *,
                                 float *,   Int *,     Int *,
                                 Int * );
void           pzgemm_         ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     Int *,     double *,
                                 double *,  Int *,     Int *,
                                 Int *,     double *,  Int *,
                                 Int *,     Int *,     double *,
                                 double *,  Int *,     Int *,
                                 Int * );

void           pssymm_         ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     float *,   float *,
                                 Int *,     Int *,     Int *,
                                 float *,   Int *,     Int *,
                                 Int *,     float *,   float *,
                                 Int *,     Int *,     Int * );
void           pdsymm_         ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     double *,  double *,
                                 Int *,     Int *,     Int *,
                                 double *,  Int *,     Int *,
                                 Int *,     double *,  double *,
                                 Int *,     Int *,     Int * );
void           pcsymm_         ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     float *,   float *,
                                 Int *,     Int *,     Int *,
                                 float *,   Int *,     Int *,
                                 Int *,     float *,   float *,
                                 Int *,     Int *,     Int * );
void           pzsymm_         ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     double *,  double *,
                                 Int *,     Int *,     Int *,
                                 double *,  Int *,     Int *,
                                 Int *,     double *,  double *,
                                 Int *,     Int *,     Int * );
void           pchemm_         ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     float *,   float *,
                                 Int *,     Int *,     Int *,
                                 float *,   Int *,     Int *,
                                 Int *,     float *,   float *,
                                 Int *,     Int *,     Int * );
void           pzhemm_         ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     double *,  double *,
                                 Int *,     Int *,     Int *,
                                 double *,  Int *,     Int *,
                                 Int *,     double *,  double *,
                                 Int *,     Int *,     Int * );

void           pssyr2k_        ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     float *,   float *,
                                 Int *,     Int *,     Int *,
                                 float *,   Int *,     Int *,
                                 Int *,     float *,   float *,
                                 Int *,     Int *,     Int * );
void           pdsyr2k_        ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     double *,  double *,
                                 Int *,     Int *,     Int *,
                                 double *,  Int *,     Int *,
                                 Int *,     double *,  double *,
                                 Int *,     Int *,     Int * );
void           pcsyr2k_        ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     float *,   float *,
                                 Int *,     Int *,     Int *,
                                 float *,   Int *,     Int *,
                                 Int *,     float *,   float *,
                                 Int *,     Int *,     Int * );
void           pzsyr2k_        ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     double *,  double *,
                                 Int *,     Int *,     Int *,
                                 double *,  Int *,     Int *,
                                 Int *,     double *,  double *,
                                 Int *,     Int *,     Int * );
void           pcher2k_        ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     float *,   float *,
                                 Int *,     Int *,     Int *,
                                 float *,   Int *,     Int *,
                                 Int *,     float *,   float *,
                                 Int *,     Int *,     Int * );
void           pzher2k_        ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     double *,  double *,
                                 Int *,     Int *,     Int *,
                                 double *,  Int *,     Int *,
                                 Int *,     double *,  double *,
                                 Int *,     Int *,     Int * );

void           pssyrk_         ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     float *,   float *,
                                 Int *,     Int *,     Int *,
                                 float *,   float *,   Int *,
                                 Int *,     Int * );
void           pdsyrk_         ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     double *,  double *,
                                 Int *,     Int *,     Int *,
                                 double *,  double *,  Int *,
                                 Int *,     Int * );
void           pcsyrk_         ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     float *,   float *,
                                 Int *,     Int *,     Int *,
                                 float *,   float *,   Int *,
                                 Int *,     Int * );
void           pzsyrk_         ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     double *,  double *,
                                 Int *,     Int *,     Int *,
                                 double *,  double *,  Int *,
                                 Int *,     Int * );
void           pcherk_         ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     float *,   float *,
                                 Int *,     Int *,     Int *,
                                 float *,   float *,   Int *,
                                 Int *,     Int * );
void           pzherk_         ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     double *,  double *,
                                 Int *,     Int *,     Int *,
                                 double *,  double *,  Int *,
                                 Int *,     Int * );

void           pstradd_        ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     float *,   float *,
                                 Int *,     Int *,     Int *,
                                 float *,   float *,   Int *,
                                 Int *,     Int * );
void           pdtradd_        ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     double *,  double *,
                                 Int *,     Int *,     Int *,
                                 double *,  double *,  Int *,
                                 Int *,     Int * );
void           pctradd_        ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     float *,   float *,
                                 Int *,     Int *,     Int *,
                                 float *,   float *,   Int *,
                                 Int *,     Int * );
void           pztradd_        ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     double *,  double *,
                                 Int *,     Int *,     Int *,
                                 double *,  double *,  Int *,
                                 Int *,     Int * );

void           pstran_         ( Int *,     Int *,     float *,
                                 float *,   Int *,     Int *,
                                 Int *,     float *,   float *,
                                 Int *,     Int *,     Int * );
void           pdtran_         ( Int *,     Int *,     double *,
                                 double *,  Int *,     Int *,
                                 Int *,     double *,  double *,
                                 Int *,     Int *,     Int * );
void           pctranc_        ( Int *,     Int *,     float *,
                                 float *,   Int *,     Int *,
                                 Int *,     float *,   float *,
                                 Int *,     Int *,     Int * );
void           pztranc_        ( Int *,     Int *,     double *,
                                 double *,  Int *,     Int *,
                                 Int *,     double *,  double *,
                                 Int *,     Int *,     Int * );
void           pctranu_        ( Int *,     Int *,     float *,
                                 float *,   Int *,     Int *,
                                 Int *,     float *,   float *,
                                 Int *,     Int *,     Int * );
void           pztranu_        ( Int *,     Int *,     double *,
                                 double *,  Int *,     Int *,
                                 Int *,     double *,  double *,
                                 Int *,     Int *,     Int * );

void           pstrmm_         ( F_CHAR_T,  F_CHAR_T,  F_CHAR_T,
                                 F_CHAR_T,  Int *,     Int *,
                                 float *,   float *,   Int *,
                                 Int *,     Int *,     float *,
                                 Int *,     Int *,     Int * );
void           pdtrmm_         ( F_CHAR_T,  F_CHAR_T,  F_CHAR_T,
                                 F_CHAR_T,  Int *,     Int *,
                                 double *,  double *,  Int *,
                                 Int *,     Int *,     double *,
                                 Int *,     Int *,     Int * );
void           pctrmm_         ( F_CHAR_T,  F_CHAR_T,  F_CHAR_T,
                                 F_CHAR_T,  Int *,     Int *,
                                 float *,   float *,   Int *,
                                 Int *,     Int *,     float *,
                                 Int *,     Int *,     Int * );
void           pztrmm_         ( F_CHAR_T,  F_CHAR_T,  F_CHAR_T,
                                 F_CHAR_T,  Int *,     Int *,
                                 double *,  double *,  Int *,
                                 Int *,     Int *,     double *,
                                 Int *,     Int *,     Int * );

void           pstrsm_         ( F_CHAR_T,  F_CHAR_T,  F_CHAR_T,
                                 F_CHAR_T,  Int *,     Int *,
                                 float *,   float *,   Int *,
                                 Int *,     Int *,     float *,
                                 Int *,     Int *,     Int * );
void           pdtrsm_         ( F_CHAR_T,  F_CHAR_T,  F_CHAR_T,
                                 F_CHAR_T,  Int *,     Int *,
                                 double *,  double *,  Int *,
                                 Int *,     Int *,     double *,
                                 Int *,     Int *,     Int * );
void           pctrsm_         ( F_CHAR_T,  F_CHAR_T,  F_CHAR_T,
                                 F_CHAR_T,  Int *,     Int *,
                                 float *,   float *,   Int *,
                                 Int *,     Int *,     float *,
                                 Int *,     Int *,     Int * );
void           pztrsm_         ( F_CHAR_T,  F_CHAR_T,  F_CHAR_T,
                                 F_CHAR_T,  Int *,     Int *,
                                 double *,  double *,  Int *,
                                 Int *,     Int *,     double *,
                                 Int *,     Int *,     Int * );
#else

void           PB_freebuf_     ();
void           PB_topget_      ();
void           PB_topset_      ();

void           picopy_         ();
void           pscopy_         ();
void           pdcopy_         ();
void           pccopy_         ();
void           pzcopy_         ();

void           psswap_         ();
void           pdswap_         ();
void           pcswap_         ();
void           pzswap_         ();

void           psaxpy_         ();
void           pdaxpy_         ();
void           pcaxpy_         ();
void           pzaxpy_         ();

void           psscal_         ();
void           pdscal_         ();
void           pcscal_         ();
void           pcsscal_        ();
void           pzscal_         ();
void           pzdscal_        ();

void           psasum_         ();
void           pdasum_         ();
void           pscasum_        ();
void           pdzasum_        ();

void           psnrm2_         ();
void           pdnrm2_         ();
void           pscnrm2_        ();
void           pdznrm2_        ();

void           psdot_          ();
void           pddot_          ();
void           pcdotc_         ();
void           pcdotu_         ();
void           pzdotc_         ();
void           pzdotu_         ();

void           psamax_         ();
void           pdamax_         ();
void           pcamax_         ();
void           pzamax_         ();

void           psgemv_         ();
void           pdgemv_         ();
void           pcgemv_         ();
void           pzgemv_         ();

void           psagemv_        ();
void           pdagemv_        ();
void           pcagemv_        ();
void           pzagemv_        ();

void           psger_          ();
void           pdger_          ();
void           pcgerc_         ();
void           pcgeru_         ();
void           pzgerc_         ();
void           pzgeru_         ();

void           pssymv_         ();
void           pdsymv_         ();
void           pchemv_         ();
void           pzhemv_         ();

void           psasymv_        ();
void           pdasymv_        ();
void           pcahemv_        ();
void           pzahemv_        ();

void           pssyr_          ();
void           pdsyr_          ();
void           pcher_          ();
void           pzher_          ();

void           pssyr2_         ();
void           pdsyr2_         ();
void           pcher2_         ();
void           pzher2_         ();

void           pstrmv_         ();
void           pdtrmv_         ();
void           pctrmv_         ();
void           pztrmv_         ();

void           psatrmv_        ();
void           pdatrmv_        ();
void           pcatrmv_        ();
void           pzatrmv_        ();

void           pstrsv_         ();
void           pdtrsv_         ();
void           pctrsv_         ();
void           pztrsv_         ();

void           psgeadd_        ();
void           pdgeadd_        ();
void           pcgeadd_        ();
void           pzgeadd_        ();

void           psgemm_         ();
void           pdgemm_         ();
void           pcgemm_         ();
void           pzgemm_         ();

void           pssymm_         ();
void           pdsymm_         ();
void           pcsymm_         ();
void           pchemm_         ();
void           pzsymm_         ();
void           pzhemm_         ();

void           pssyr2k_        ();
void           pdsyr2k_        ();
void           pcsyr2k_        ();
void           pcher2k_        ();
void           pzsyr2k_        ();
void           pzher2k_        ();

void           pssyrk_         ();
void           pdsyrk_         ();
void           pcsyrk_         ();
void           pcherk_         ();
void           pzsyrk_         ();
void           pzherk_         ();

void           pstradd_        ();
void           pdtradd_        ();
void           pctradd_        ();
void           pztradd_        ();

void           pstran_         ();
void           pdtran_         ();
void           pctranc_        ();
void           pctranu_        ();
void           pztranc_        ();
void           pztranu_        ();

void           pstrmm_         ();
void           pdtrmm_         ();
void           pctrmm_         ();
void           pztrmm_         ();

void           pstrsm_         ();
void           pdtrsm_         ();
void           pctrsm_         ();
void           pztrsm_         ();

#endif
/* ---------------------------------------------------------------------
*
*  -- PBLAS routine (version 2.0) --
*     University of Tennessee, Knoxville, Oak Ridge National Laboratory,
*     and University of California, Berkeley.
*     March 12, 2002 
*
*  ---------------------------------------------------------------------
*/
/*
*  This file includes PBLAS tools definitions. All PBLAS routines include
*  this file.
*
* ----------------------------------------------------------------------
*  #define macro constants
*  ---------------------------------------------------------------------
*
*  Descriptor entries for type 1
*/
#define    BLOCK_CYCLIC_2D     1

#define    DTYPE1_             0                   /* Descriptor Type */
#define    CTXT1_              1                     /* BLACS context */
#define    M1_                 2             /* Global Number of Rows */
#define    N1_                 3          /* Global Number of Columns */
#define    MB1_                4                 /* Row Blocking Size */
#define    NB1_                5              /* Column Blocking Size */
#define    RSRC1_              6            /* Starting Processor Row */
#define    CSRC1_              7         /* Starting Processor Column */
#define    LLD1_               8           /* Local Leading Dimension */
#define    DLEN1_              9                 /* Descriptor Length */
/*
*  Descriptor entries for type 2
*/
#define    BLOCK_CYCLIC_2D_INB 2

#define    DTYPE_              0                   /* Descriptor Type */
#define    CTXT_               1                     /* BLACS context */
#define    M_                  2             /* Global Number of Rows */
#define    N_                  3          /* Global Number of Columns */
#define    IMB_                4         /* Initial Row Blocking Size */
#define    INB_                5      /* Initial Column Blocking Size */
#define    MB_                 6                 /* Row Blocking Size */
#define    NB_                 7              /* Column Blocking Size */
#define    RSRC_               8              /* Starting Process Row */
#define    CSRC_               9           /* Starting Process Column */
#define    LLD_                10          /* Local Leading Dimension */
#define    DLEN_               11                /* Descriptor Length */

#define    CPACKING            'P'
#define    CUNPACKING          'U'

#define    PACKING             "P"
#define    UNPACKING           "U"

#define    CGENERAL            'G'
/* #define    CSYMM               'S'  */
#define    CHERM               'H'

#define    GENERAL             "G"
#define    SYMM                "S"
#define    HERM                "H"

#define    ONE                 1.0
#define    TWO                 2.0
#define    ZERO                0.0
                            /* Input error checking related constants */
#define    DESCMULT            100
#define    BIGNUM              10000
/*
*  ---------------------------------------------------------------------
*  #define macro functions
*  ---------------------------------------------------------------------
*/
#define    ABS( a_ )           ( ( (a_) <   0  ) ? -(a_) : (a_) )
#define    MIN( a_, b_ )       ( ( (a_) < (b_) ) ?  (a_) : (b_) )
#define    MAX( a_, b_ )       ( ( (a_) > (b_) ) ?  (a_) : (b_) )

#define    FLOOR(a,b) (((a)>0) ? (((a)/(b))) : (-(((-(a))+(b)-1)/(b))))
#define    CEIL(a,b)           ( ( (a)+(b)-1 ) / (b) )
#define    ICEIL(a,b) (((a)>0) ? ((((a)+(b)-1)/(b))) : (-((-(a))/(b))))

#define    Mupcase(C)          (((C)>96 && (C)<123) ? (C) & 0xDF : (C))
#define    Mlowcase(C)         (((C)>64 && (C)< 91) ? (C) | 32   : (C))
/*
*  The following macros perform common modulo operations;  All functions
*  except MPosMod assume arguments are < d (i.e., arguments are themsel-
*  ves within modulo range).
*/
                                                /* increment with mod */
#define    MModInc(I, d)       if(++(I) == (d)) (I) = 0
                                                /* decrement with mod */
#define    MModDec(I, d)       if(--(I) == -1) (I) = (d)-1
                                                   /* positive modulo */
#define    MPosMod(I, d)       ( (I) - ((I)/(d))*(d) )
                                                   /* add two numbers */
#define    MModAdd(I1, I2, d) \
           ( ( (I1) + (I2) < (d) ) ? (I1) + (I2) : (I1) + (I2) - (d) )
                                                        /* add 1 to # */
#define    MModAdd1(I, d) ( ((I) != (d)-1) ? (I) + 1 : 0 )
                                              /* subtract two numbers */
#define    MModSub(I1, I2, d) \
           ( ( (I1) < (I2) ) ? (d) + (I1) - (I2) : (I1) - (I2) )
                                                      /* sub 1 from # */
#define    MModSub1(I, d) ( ((I)!=0) ? (I)-1 : (d)-1 )
/*
*  DNROC computes maximum number of local rows or columns. This macro is
*  only used to compute the time estimates in the Level 3 PBLAS routines.
*/

#define    DNROC( n_, nb_, p_ ) \
           ((double)(((((n_)+(nb_)-1)/(nb_))+(p_)-1)/(p_))*(double)((nb_)))
/*
*  Mptr returns a pointer to a_( i_, j_ ) for readability reasons and
*  also less silly errors ...
*
*  There was some problems with the previous code which read:
*
*      #define    Mptr( a_, i_, j_, lda_, siz_ ) \
*                    ( (a_) + ( ( (i_)+(j_)*(lda_) )*(siz_) ) )
* 
*  since it can overflow the 32-bit integer "easily".
*  The following code should fix the problem.
*  It uses the "off_t" command.
*
*  Change made by Julien Langou on Sat. September 12, 2009. 
*  Fix provided by John Moyard from CNES.
*
*  JL :April 2011: Change off_t by long long
*  off_t is not supported under Windows
*/
#define    Mptr( a_, i_, j_, lda_, siz_ ) \
              ( (a_) + ( (long long) ( (long long)(i_)+ \
              (long long)(j_)*(long long)(lda_))*(long long)(siz_) ) )
/*
*  Mfirstnb and Mlastnb compute the global size of the first and last
*  block corresponding to the interval i_:i_+n_-1 of global indexes.
*/
#define    Mfirstnb( inbt_, n_, i_, inb_, nb_ ) \
              inbt_ = (inb_) - (i_); \
              if( inbt_ <= 0 ) \
                 inbt_ = ( (-inbt_) / (nb_) + 1 ) * (nb_) + inbt_; \
              inbt_ = MIN( inbt_, (n_) );

#define    Mlastnb( inbt_, n_, i_, inb_, nb_ ) \
              inbt_ = (i_) + (n_) - (inb_); \
              if( inbt_ > 0 ) \
              { \
                 inbt_ = -( ( (nb_)+inbt_-1 )/(nb_)-1 )*(nb_) + inbt_; \
                 inbt_ = MIN( inbt_, (n_) ); \
              } \
              else { inbt_ = (n_); };
/*
*  Does the index interval i_:i_+n_-1 spans more than one process rows
*  or columns ?
*
*  Mspan returns 0 (false) when the data is replicated (srcproc_ < 0) or
*  when there is only one process row or column in the process grid.
*/
#define    Mspan( n_, i_, inb_, nb_, srcproc_, nprocs_ ) \
              ( ( (srcproc_) >= 0 ) && ( ( (nprocs_) > 1 ) && \
              ( ( (i_) < (inb_) ) ? \
                ( (i_) + (n_) > (inb_) ) : \
                ( (i_) + (n_) > (inb_) + \
                  ( ( (i_) - (inb_) ) / (nb_) + 1 ) * (nb_) ) ) ) )
/*
*  Mindxl2g computes the global index ig_ corresponding to the local
*  index il_ in process proc_.
*/
#define    Mindxl2g( ig_, il_, inb_, nb_, proc_, srcproc_, nprocs_ ) \
           { \
              if( ( (srcproc_) >= 0 ) && ( (nprocs_) > 1 ) ) \
              { \
                 if( (proc_) == (srcproc_) ) \
                 { \
                    if( (il_) < (inb_) ) ig_ = (il_); \
                    else                 ig_ = (il_) + \
                       (nb_)*((nprocs_)-1)*( ((il_)-(inb_)) / (nb_) + 1 ); \
                 } \
                 else if( (proc_) < (srcproc_) ) \
                 { \
                    ig_ = (il_) + (inb_) + \
                          (nb_)*(  ((nprocs_)-1)*((il_)/(nb_)) + \
                                   (proc_)-(srcproc_)-1+(nprocs_) ); \
                 } \
                 else \
                 { \
                    ig_ =  (il_) + (inb_) + \
                           (nb_)*( ((nprocs_)-1)*((il_)/(nb_)) + \
                           (proc_)-(srcproc_)-1 ); \
                 } \
              } \
              else \
              { \
                 ig_ = (il_); \
              } \
           }
/*
*  Mindxg2p returns the process coodinate owning the entry globally
*  indexed by ig_.
*/
#define    Mindxg2p( ig_, inb_, nb_, proc_, srcproc_, nprocs_ ) \
           { \
              if( ( (ig_) >= (inb_) ) && ( (srcproc_) >= 0 ) && \
                  ( (nprocs_) > 1 ) ) \
              { \
                 proc_  = (srcproc_) + 1 + ( (ig_)-(inb_) ) / (nb_); \
                 proc_ -= ( proc_ / (nprocs_) ) * (nprocs_); \
              } \
              else \
              { \
                 proc_ = (srcproc_); \
              } \
           }
/*
*  Mnumroc computes the # of local indexes np_ residing in the process
*  of coordinate proc_ corresponding to the interval of global indexes
*  i_:i_+n_-1 assuming that the global index 0 resides in  the process
*  srcproc_, and that the indexes are distributed from  srcproc_ using
*  the parameters inb_, nb_ and nprocs_.
*/
#define    Mnumroc( np_, n_, i_, inb_, nb_, proc_, srcproc_, nprocs_ ) \
           { \
              if( ( (srcproc_) >= 0 ) && ( (nprocs_) > 1 ) ) \
              { \
                 Int inb__, mydist__, n__, nblk__, quot__, src__; \
                 if( ( inb__ = (inb_) - (i_) ) <= 0 ) \
                 { \
                    src__  = (srcproc_) + ( nblk__ = (-inb__) / (nb_) + 1 ); \
                    src__ -= ( src__ / (nprocs_) ) * (nprocs_); \
                    inb__ += nblk__*(nb_); \
                    if( ( n__ = (n_) - inb__ ) <= 0 ) \
                    { if( (proc_) == src__ ) np_ = (n_); else np_ = 0; } \
                    else \
                    { \
                       if( ( mydist__ = (proc_) - src__ ) < 0 ) \
                          mydist__ += (nprocs_); \
                       nblk__    = n__ / (nb_) + 1; \
                       mydist__ -= nblk__ - \
                          ( quot__ = ( nblk__ / (nprocs_) ) ) * (nprocs_); \
                       if( mydist__ < 0 ) \
                       { \
                          if( (proc_) != src__ ) \
                             np_ = (nb_) + (nb_) * quot__; \
                          else \
                             np_ = inb__ + (nb_) * quot__; \
                       } \
                       else if( mydist__ > 0 ) \
                       { \
                          np_ = (nb_) * quot__; \
                       } \
                       else \
                       { \
                          if( (proc_) != src__ ) \
                             np_ = n__ + (nb_) + (nb_) * ( quot__ - nblk__ ); \
                          else \
                             np_ = (n_) +        (nb_) * ( quot__ - nblk__ ); \
                       } \
                    } \
                 } \
                 else \
                 { \
                    if( ( n__ = (n_) - inb__ ) <= 0 ) \
                    { if( (proc_) == (srcproc_) ) np_ = (n_); else np_ = 0; } \
                    else \
                    { \
                       if( ( mydist__ = (proc_) - (srcproc_) ) < 0 ) \
                          mydist__ += (nprocs_); \
                       nblk__    = n__ / (nb_) + 1; \
                       mydist__ -= nblk__ - \
                          ( quot__ = ( nblk__ / (nprocs_) ) ) * (nprocs_); \
                       if( mydist__ < 0 ) \
                       { \
                          if( (proc_) != (srcproc_) ) \
                             np_ = (nb_) + (nb_) * quot__; \
                          else \
                             np_ = inb__ + (nb_) * quot__; \
                       } \
                       else if( mydist__ > 0 ) \
                       { \
                          np_ = (nb_) * quot__; \
                       } \
                       else \
                       { \
                          if( (proc_) != (srcproc_) ) \
                             np_ = n__ + (nb_) + (nb_) * ( quot__ - nblk__ ); \
                          else \
                             np_ = (n_) +        (nb_) * ( quot__ - nblk__ ); \
                       } \
                    } \
                 } \
              } \
              else \
              { \
                 np_ = (n_); \
              } \
           }

#define    Mnpreroc( np_, n_, i_, inb_, nb_, proc_, srcproc_, nprocs_ ) \
           { \
              if( ( (srcproc_) >= 0 ) && ( (nprocs_) > 1 ) ) \
              { \
                 Int inb__, mydist__, n__, nblk__, quot__, rem__, src__; \
                 if( ( inb__ = (inb_) - (i_) ) <= 0 ) \
                 { \
                    src__  = (srcproc_) + ( nblk__ = (-inb__) / (nb_) + 1 ); \
                    src__ -= ( src__ / (nprocs_) ) * (nprocs_); \
                    if( (proc_) != src__ ) \
                    { \
                       inb__ += nblk__*(nb_); \
                       if( ( n__ = (n_) - inb__ ) <= 0 ) { np_ = (n_); } \
                       else \
                       { \
                          if( ( mydist__ = (proc_) - src__ ) < 0 ) \
                             mydist__ += (nprocs_); \
                          nblk__ = n__ / (nb_) + 1; \
                          rem__  = nblk__ - \
                             ( quot__ = ( nblk__ / (nprocs_) ) ) * (nprocs_); \
                          if( mydist__ <= rem__ ) \
                          { \
                             np_ = inb__ - (nb_) + \
                                   ( quot__ + 1 ) * mydist__ * (nb_); \
                          } \
                          else \
                          { \
                             np_ = (n_) + \
                                   ( mydist__ - (nprocs_) ) * quot__ * (nb_); \
                          } \
                       } \
                    } \
                    else \
                    { \
                       np_ = 0; \
                    } \
                 } \
                 else \
                 { \
                    if( (proc_) != (srcproc_) ) \
                    { \
                       if( ( n__ = (n_) - inb__ ) <= 0 ) { np_ = (n_); } \
                       else \
                       { \
                          if( ( mydist__ = (proc_) - (srcproc_) ) < 0 ) \
                             mydist__ += (nprocs_); \
                          nblk__ = n__ / (nb_) + 1; \
                          rem__  = nblk__ - \
                             ( quot__ = ( nblk__ / (nprocs_) ) ) * (nprocs_); \
                          if( mydist__ <= rem__ ) \
                          { \
                             np_ = inb__ - (nb_) + \
                                   ( quot__ + 1 ) * mydist__ * (nb_); \
                          } \
                          else \
                          { \
                             np_ = (n_) + \
                                   ( mydist__ - (nprocs_) ) * quot__ * (nb_); \
                          } \
                       } \
                    } \
                    else \
                    { \
                       np_ = 0; \
                    } \
                 } \
              } \
              else \
              { \
                 np_ = 0; \
              } \
           }

#define    Mnnxtroc( np_, n_, i_, inb_, nb_, proc_, srcproc_, nprocs_ ) \
           { \
              if( ( (srcproc_) >= 0 ) && ( (nprocs_) > 1 ) ) \
              { \
                 Int inb__, mydist__, n__, nblk__, quot__, rem__, src__; \
                 if( ( inb__ = (inb_) - (i_) ) <= 0 ) \
                 { \
                    src__  = (srcproc_) + ( nblk__ = (-inb__) / (nb_) + 1 ); \
                    src__ -= ( src__ / (nprocs_) ) * (nprocs_); \
                    inb__ += nblk__*(nb_); \
                    if( ( n__ = (n_) - inb__ ) <= 0 ) { np_ = 0; } \
                    else \
                    { \
                       if( ( mydist__ = (proc_) - src__ ) < 0 ) \
                          mydist__ += (nprocs_); \
                       nblk__ = n__ / (nb_) + 1; \
                       rem__  = nblk__ - \
                             ( quot__ = ( nblk__ / (nprocs_) ) ) * (nprocs_); \
                       if( mydist__ < rem__ ) \
                       { \
                          np_ = n__ - ( quot__ * mydist__ + \
                                        quot__ + mydist__ ) * (nb_); \
                       } \
                       else \
                       { \
                          np_ = ( (nprocs_) - 1 - mydist__ ) * quot__ * (nb_); \
                       } \
                    } \
                 } \
                 else \
                 { \
                    if( ( n__ = (n_) - inb__ ) <= 0 ) { np_ = 0; } \
                    else \
                    { \
                       if( ( mydist__ = (proc_) - (srcproc_) ) < 0 ) \
                          mydist__ += (nprocs_); \
                       nblk__ = n__ / (nb_) + 1; \
                       rem__  = nblk__ - \
                             ( quot__ = ( nblk__ / (nprocs_) ) ) * (nprocs_); \
                       if( mydist__ < rem__ ) \
                       { \
                          np_ = n__ - ( quot__ * mydist__ + \
                                        quot__ + mydist__ ) * (nb_); \
                       } \
                       else \
                       { \
                          np_ = ( (nprocs_) - 1 - mydist__ ) * quot__ * (nb_); \
                       } \
                    } \
                 } \
              } \
              else \
              { np_ = 0; } \
           }


#define    Minfog2l( i_, j_, desc_, nr_, nc_, r_, c_, ii_, jj_, pr_, pc_ ) \
           { \
              Int quot__, i__, imb__, inb__, j__, mb__, mydist__, \
                  nb__, nblk__, src__; \
              imb__ = desc_[IMB_]; mb__ = desc_[MB_]; pr_ = desc_[RSRC_]; \
              if( ( pr_ >= 0 ) && ( nr_ > 1 ) ) \
              { \
                 if( ( i__ = (i_) - imb__ ) < 0 ) \
                 { ii_ = ( r_ == pr_ ? (i_) : 0 ); } \
                 else \
                 { \
                    src__     = pr_; \
                    pr_      += ( nblk__ = i__ / mb__ + 1 ); \
                    pr_      -= ( pr_ / nr_ ) * nr_; \
                    if( ( mydist__ = r_ - src__ ) < 0 ) mydist__ += nr_; \
                    if( mydist__ >= nblk__ - ( quot__ = nblk__ / nr_ ) * nr_ ) \
                    { \
                       if( r_ != src__ ) ii_ =  mb__; \
                       else              ii_ = imb__; \
                       if( r_ != pr_ ) \
                          ii_ += ( quot__ - 1 ) * mb__; \
                       else \
                          ii_ += i__ + ( quot__ - nblk__ ) * mb__; \
                    } \
                    else \
                    { \
                       if( r_ != src__ ) ii_ =  mb__ + quot__ * mb__; \
                       else              ii_ = imb__ + quot__ * mb__; \
                    } \
                 } \
              } \
              else \
              { \
                 ii_ = (i_); \
              } \
              inb__ = desc_[INB_]; nb__ = desc_[NB_]; pc_ = desc_[CSRC_]; \
              if( ( pc_ >= 0 ) && ( nc_ > 1 ) ) \
              { \
                 if( ( j__ = (j_) - inb__ ) < 0 ) \
                 { jj_ = ( c_ == pc_ ? (j_) : 0 ); } \
                 else \
                 { \
                    src__     = pc_; \
                    pc_      += ( nblk__ = j__ / nb__ + 1 ); \
                    pc_      -= ( pc_ / nc_ ) * nc_; \
                    if( ( mydist__ = c_ - src__ ) < 0 ) mydist__ += nc_; \
                    if( mydist__ >= nblk__ - ( quot__ = nblk__ / nc_ ) * nc_ ) \
                    { \
                       if( c_ != src__ ) jj_ =  nb__; \
                       else              jj_ = inb__; \
                       if( c_ != pc_ ) \
                          jj_ += ( quot__ - 1 ) * nb__; \
                       else \
                          jj_ += j__ + ( quot__ - nblk__ ) * nb__; \
                    } \
                    else \
                    { \
                       if( c_ != src__ ) jj_ =  nb__ + quot__ * nb__; \
                       else              jj_ = inb__ + quot__ * nb__; \
                    } \
                 } \
              } \
              else \
              { \
                 jj_ = (j_); \
              } \
           }

/*
*  The following macros initialize or translate descriptors.
*/
#define    MDescSet( desc, m, n, imb, inb, mb, nb, rsrc, csrc, ictxt, lld ) \
           { \
              (desc)[DTYPE_] = BLOCK_CYCLIC_2D_INB; \
              (desc)[CTXT_ ] = (ictxt); \
              (desc)[M_    ] = (m);     \
              (desc)[N_    ] = (n);     \
              (desc)[IMB_  ] = (imb);   \
              (desc)[INB_  ] = (inb);   \
              (desc)[MB_   ] = (mb);    \
              (desc)[NB_   ] = (nb);    \
              (desc)[RSRC_ ] = (rsrc);  \
              (desc)[CSRC_ ] = (csrc);  \
              (desc)[LLD_  ] = (lld);   \
           }

#define    MDescCopy(DescIn, DescOut) \
           { \
              (DescOut)[DTYPE_] = (DescIn)[DTYPE_];    \
              (DescOut)[M_    ] = (DescIn)[M_    ];    \
              (DescOut)[N_    ] = (DescIn)[N_    ];    \
              (DescOut)[IMB_  ] = (DescIn)[IMB_  ];    \
              (DescOut)[INB_  ] = (DescIn)[INB_  ];    \
              (DescOut)[MB_   ] = (DescIn)[MB_   ];    \
              (DescOut)[NB_   ] = (DescIn)[NB_   ];    \
              (DescOut)[RSRC_ ] = (DescIn)[RSRC_ ];    \
              (DescOut)[CSRC_ ] = (DescIn)[CSRC_ ];    \
              (DescOut)[CTXT_ ] = (DescIn)[CTXT_ ];    \
              (DescOut)[LLD_  ] = (DescIn)[LLD_  ];    \
           }

#define    MDescTrans(DescIn, DescOut) \
           { \
              if ( (DescIn)[DTYPE_] == BLOCK_CYCLIC_2D ) \
              { \
                 (DescOut)[DTYPE_] = BLOCK_CYCLIC_2D_INB; \
                 (DescOut)[M_    ] = (DescIn)[M1_    ];   \
                 (DescOut)[N_    ] = (DescIn)[N1_    ];   \
                 (DescOut)[IMB_  ] = (DescIn)[MB1_   ];   \
                 (DescOut)[INB_  ] = (DescIn)[NB1_   ];   \
                 (DescOut)[MB_   ] = (DescIn)[MB1_   ];   \
                 (DescOut)[NB_   ] = (DescIn)[NB1_   ];   \
                 (DescOut)[RSRC_ ] = (DescIn)[RSRC1_ ];   \
                 (DescOut)[CSRC_ ] = (DescIn)[CSRC1_ ];   \
                 (DescOut)[CTXT_ ] = (DescIn)[CTXT1_ ];   \
                 (DescOut)[LLD_  ] = (DescIn)[LLD1_  ];   \
              } \
              else if ( (DescIn)[DTYPE_] == BLOCK_CYCLIC_2D_INB ) \
              { \
                 (DescOut)[DTYPE_] = BLOCK_CYCLIC_2D_INB; \
                 (DescOut)[M_    ] = (DescIn)[M_    ];    \
                 (DescOut)[N_    ] = (DescIn)[N_    ];    \
                 (DescOut)[IMB_  ] = (DescIn)[IMB_  ];    \
                 (DescOut)[INB_  ] = (DescIn)[INB_  ];    \
                 (DescOut)[MB_   ] = (DescIn)[MB_   ];    \
                 (DescOut)[NB_   ] = (DescIn)[NB_   ];    \
                 (DescOut)[RSRC_ ] = (DescIn)[RSRC_ ];    \
                 (DescOut)[CSRC_ ] = (DescIn)[CSRC_ ];    \
                 (DescOut)[CTXT_ ] = (DescIn)[CTXT_ ];    \
                 (DescOut)[LLD_  ] = (DescIn)[LLD_  ];    \
              } \
              else \
              { \
                 (DescOut)[DTYPE_] = (DescIn)[0]; \
                 (DescOut)[CTXT_ ] = (DescIn)[1]; \
                 (DescOut)[M_    ] = 0;           \
                 (DescOut)[N_    ] = 0;           \
                 (DescOut)[IMB_  ] = 1;           \
                 (DescOut)[INB_  ] = 1;           \
                 (DescOut)[MB_   ] = 1;           \
                 (DescOut)[NB_   ] = 1;           \
                 (DescOut)[RSRC_ ] = 0;           \
                 (DescOut)[CSRC_ ] = 0;           \
                 (DescOut)[LLD_  ] = 1;           \
              } \
           }

#define    MIndxTrans( I, J, i, j ) \
           { \
              i = *I - 1; \
              j = *J - 1; \
           }

#if( _F2C_CALL_ == _F2C_ADD_ )
/*
*  These defines  set  up  the  naming scheme required to have a FORTRAN
*  routine called by a C routine. No redefinition is necessary  to  have
*  the following FORTRAN to C interface:
*
*           FORTRAN DECLARATION            C CALL
*           SUBROUTINE PDFOO(...)          pdfoo_(...)
*
*  This is the PBLAS default.
*/

#endif

#if( _F2C_CALL_ == _F2C_F77ISF2C )
/*
*  These defines  set  up  the  naming scheme required to have a FORTRAN
*  routine called by a C routine for systems where  the FORTRAN compiler
*  is actually f2c (a FORTRAN to C conversion utility).
*
*           FORTRAN DECLARATION            C CALL
*           SUBROUTINE PDFOO(...)          pdfoo__(...)
*/

#endif

#if( _F2C_CALL_ == _F2C_UPCASE )
/*
*  These defines  set  up  the  naming scheme required to have a FORTRAN
*  routine called by a C routine with the following  FORTRAN to C inter-
*  face:
*
*           FORTRAN DECLARATION            C CALL
*           SUBROUTINE PDFOO(...)          PDFOO(...)
*/
#define    immadd_             IMMADD
#define    smmadd_             SMMADD
#define    dmmadd_             DMMADD
#define    cmmadd_             CMMADD
#define    zmmadd_             ZMMADD

#define    immtadd_            IMMTADD
#define    smmtadd_            SMMTADD
#define    dmmtadd_            DMMTADD
#define    cmmtadd_            CMMTADD
#define    zmmtadd_            ZMMTADD

#define    smmcadd_            SMMCADD
#define    dmmcadd_            DMMCADD
#define    cmmcadd_            CMMCADD
#define    zmmcadd_            ZMMCADD

#define    smmtcadd_           SMMTCADD
#define    dmmtcadd_           DMMTCADD
#define    cmmtcadd_           CMMTCADD
#define    zmmtcadd_           ZMMTCADD

#define    immdda_             IMMDDA
#define    smmdda_             SMMDDA
#define    dmmdda_             DMMDDA
#define    cmmdda_             CMMDDA
#define    zmmdda_             ZMMDDA

#define    smmddac_            SMMDDAC
#define    dmmddac_            DMMDDAC
#define    cmmddac_            CMMDDAC
#define    zmmddac_            ZMMDDAC

#define    immddat_            IMMDDAT
#define    smmddat_            SMMDDAT
#define    dmmddat_            DMMDDAT
#define    cmmddat_            CMMDDAT
#define    zmmddat_            ZMMDDAT

#define    smmddact_           SMMDDACT
#define    dmmddact_           DMMDDACT
#define    cmmddact_           CMMDDACT
#define    zmmddact_           ZMMDDACT

#define    sasqrtb_            SASQRTB
#define    dasqrtb_            DASQRTB

#define    sset_               SSET
#define    dset_               DSET
#define    cset_               CSET
#define    zset_               ZSET

#define    svasum_             SVASUM
#define    dvasum_             DVASUM
#define    scvasum_            SCVASUM
#define    dzvasum_            DZVASUM

#define    sascal_             SASCAL
#define    dascal_             DASCAL

#define    scshft_             SCSHFT
#define    dcshft_             DCSHFT
#define    ccshft_             CCSHFT
#define    zcshft_             ZCSHFT

#define    srshft_             SRSHFT
#define    drshft_             DRSHFT
#define    crshft_             CRSHFT
#define    zrshft_             ZRSHFT

#define    svvdot_             SVVDOT
#define    dvvdot_             DVVDOT
#define    cvvdotc_            CVVDOTC
#define    cvvdotu_            CVVDOTU
#define    zvvdotc_            ZVVDOTC
#define    zvvdotu_            ZVVDOTU

#define    stzpad_             STZPAD
#define    dtzpad_             DTZPAD
#define    ctzpad_             CTZPAD
#define    ztzpad_             ZTZPAD

#define    stzpadcpy_          STZPADCPY
#define    dtzpadcpy_          DTZPADCPY
#define    ctzpadcpy_          CTZPADCPY
#define    ztzpadcpy_          ZTZPADCPY

#define    stzscal_            STZSCAL
#define    dtzscal_            DTZSCAL
#define    ctzscal_            CTZSCAL
#define    ztzscal_            ZTZSCAL

#define    chescal_            CHESCAL
#define    zhescal_            ZHESCAL

#define    ctzcnjg_            CTZCNJG
#define    ztzcnjg_            ZTZCNJG

#define    sagemv_             SAGEMV
#define    dagemv_             DAGEMV
#define    cagemv_             CAGEMV
#define    zagemv_             ZAGEMV

#define    sasymv_             SASYMV
#define    dasymv_             DASYMV
#define    casymv_             CASYMV
#define    zasymv_             ZASYMV
#define    cahemv_             CAHEMV
#define    zahemv_             ZAHEMV

#define    satrmv_             SATRMV
#define    datrmv_             DATRMV
#define    catrmv_             CATRMV
#define    zatrmv_             ZATRMV

#define    csymv_              CSYMV
#define    zsymv_              ZSYMV

#define    csyr_               CSYR
#define    zsyr_               ZSYR

#define    csyr2_              CSYR2
#define    zsyr2_              ZSYR2

#endif

#if( _F2C_CALL_ == _F2C_NOCHANGE )
/*
*  These defines  set  up  the  naming scheme required to have a FORTRAN
*  routine called by a C routine with the following  FORTRAN to C inter-
*  face:
*
*           FORTRAN DECLARATION            C CALL
*           SUBROUTINE PDFOO(...)          pdfoo(...)
*/
#define    immadd_             immadd
#define    smmadd_             smmadd
#define    dmmadd_             dmmadd
#define    cmmadd_             cmmadd
#define    zmmadd_             zmmadd

#define    immtadd_            immtadd
#define    smmtadd_            smmtadd
#define    dmmtadd_            dmmtadd
#define    cmmtadd_            cmmtadd
#define    zmmtadd_            zmmtadd

#define    smmcadd_            smmcadd
#define    dmmcadd_            dmmcadd
#define    cmmcadd_            cmmcadd
#define    zmmcadd_            zmmcadd

#define    smmtcadd_           smmtcadd
#define    dmmtcadd_           dmmtcadd
#define    cmmtcadd_           cmmtcadd
#define    zmmtcadd_           zmmtcadd

#define    immdda_             immdda
#define    smmdda_             smmdda
#define    dmmdda_             dmmdda
#define    cmmdda_             cmmdda
#define    zmmdda_             zmmdda

#define    smmddac_            smmddac
#define    dmmddac_            dmmddac
#define    cmmddac_            cmmddac
#define    zmmddac_            zmmddac

#define    immddat_            immddat
#define    smmddat_            smmddat
#define    dmmddat_            dmmddat
#define    cmmddat_            cmmddat
#define    zmmddat_            zmmddat

#define    smmddact_           smmddact
#define    dmmddact_           dmmddact
#define    cmmddact_           cmmddact
#define    zmmddact_           zmmddact

#define    sasqrtb_            sasqrtb
#define    dasqrtb_            dasqrtb

#define    sset_               sset
#define    dset_               dset
#define    cset_               cset
#define    zset_               zset

#define    svasum_             svasum
#define    dvasum_             dvasum
#define    scvasum_            scvasum
#define    dzvasum_            dzvasum

#define    sascal_             sascal
#define    dascal_             dascal

#define    scshft_             scshft
#define    dcshft_             dcshft
#define    ccshft_             ccshft
#define    zcshft_             zcshft

#define    srshft_             srshft
#define    drshft_             drshft
#define    crshft_             crshft
#define    zrshft_             zrshft

#define    svvdot_             svvdot
#define    dvvdot_             dvvdot
#define    cvvdotc_            cvvdotc
#define    cvvdotu_            cvvdotu
#define    zvvdotc_            zvvdotc
#define    zvvdotu_            zvvdotu

#define    stzpad_             stzpad
#define    dtzpad_             dtzpad
#define    ctzpad_             ctzpad
#define    ztzpad_             ztzpad

#define    stzpadcpy_          stzpadcpy
#define    dtzpadcpy_          dtzpadcpy
#define    ctzpadcpy_          ctzpadcpy
#define    ztzpadcpy_          ztzpadcpy

#define    stzscal_            stzscal
#define    dtzscal_            dtzscal
#define    ctzscal_            ctzscal
#define    ztzscal_            ztzscal

#define    chescal_            chescal
#define    zhescal_            zhescal

#define    ctzcnjg_            ctzcnjg
#define    ztzcnjg_            ztzcnjg

#define    sagemv_             sagemv
#define    dagemv_             dagemv
#define    cagemv_             cagemv
#define    zagemv_             zagemv

#define    sasymv_             sasymv
#define    dasymv_             dasymv
#define    casymv_             casymv
#define    zasymv_             zasymv
#define    cahemv_             cahemv
#define    zahemv_             zahemv

#define    satrmv_             satrmv
#define    datrmv_             datrmv
#define    catrmv_             catrmv
#define    zatrmv_             zatrmv

#define    csymv_              csymv
#define    zsymv_              zsymv

#define    csyr_               csyr
#define    zsyr_               zsyr

#define    csyr2_              csyr2
#define    zsyr2_              zsyr2

#endif
/*
*  ---------------------------------------------------------------------
*  Function prototypes
*  ---------------------------------------------------------------------
*/
#ifdef __STDC__

F_VOID_FCT     immadd_         ( Int *,     Int *,     char *,
                                 char *,    Int *,     char *,
                                 char *,    Int * );
F_VOID_FCT     smmadd_         ( Int *,     Int *,     char *,
                                 char *,    Int *,     char *,
                                 char *,    Int * );
F_VOID_FCT     dmmadd_         ( Int *,     Int *,     char *,
                                 char *,    Int *,     char *,
                                 char *,    Int * );
F_VOID_FCT     cmmadd_         ( Int *,     Int *,     char *,
                                 char *,    Int *,     char *,
                                 char *,    Int * );
F_VOID_FCT     zmmadd_         ( Int *,     Int *,     char *,
                                 char *,    Int *,     char *,
                                 char *,    Int * );

F_VOID_FCT     smmcadd_        ( Int *,     Int *,     char *,
                                 char *,    Int *,     char *,
                                 char *,    Int * );
F_VOID_FCT     dmmcadd_        ( Int *,     Int *,     char *,
                                 char *,    Int *,     char *,
                                 char *,    Int * );
F_VOID_FCT     cmmcadd_        ( Int *,     Int *,     char *,
                                 char *,    Int *,     char *,
                                 char *,    Int * );
F_VOID_FCT     zmmcadd_        ( Int *,     Int *,     char *,
                                 char *,    Int *,     char *,
                                 char *,    Int * );

F_VOID_FCT     immtadd_        ( Int *,     Int *,     char *,
                                 char *,    Int *,     char *,
                                 char *,    Int * );
F_VOID_FCT     smmtadd_        ( Int *,     Int *,     char *,
                                 char *,    Int *,     char *,
                                 char *,    Int * );
F_VOID_FCT     dmmtadd_        ( Int *,     Int *,     char *,
                                 char *,    Int *,     char *,
                                 char *,    Int * );
F_VOID_FCT     cmmtadd_        ( Int *,     Int *,     char *,
                                 char *,    Int *,     char *,
                                 char *,    Int * );
F_VOID_FCT     zmmtadd_        ( Int *,     Int *,     char *,
                                 char *,    Int *,     char *,
                                 char *,    Int * );

F_VOID_FCT     smmtcadd_       ( Int *,     Int *,     char *,
                                 char *,    Int *,     char *,
                                 char *,    Int * );
F_VOID_FCT     dmmtcadd_       ( Int *,     Int *,     char *,
                                 char *,    Int *,     char *,
                                 char *,    Int * );
F_VOID_FCT     cmmtcadd_       ( Int *,     Int *,     char *,
                                 char *,    Int *,     char *,
                                 char *,    Int * );
F_VOID_FCT     zmmtcadd_       ( Int *,     Int *,     char *,
                                 char *,    Int *,     char *,
                                 char *,    Int * );

F_VOID_FCT     immdda_         ( Int *,     Int *,     char *,
                                 char *,    Int *,     char *,
                                 char *,    Int * );
F_VOID_FCT     smmdda_         ( Int *,     Int *,     char *,
                                 char *,    Int *,     char *,
                                 char *,    Int * );
F_VOID_FCT     dmmdda_         ( Int *,     Int *,     char *,
                                 char *,    Int *,     char *,
                                 char *,    Int * );
F_VOID_FCT     cmmdda_         ( Int *,     Int *,     char *,
                                 char *,    Int *,     char *,
                                 char *,    Int * );
F_VOID_FCT     zmmdda_         ( Int *,     Int *,     char *,
                                 char *,    Int *,     char *,
                                 char *,    Int * );

F_VOID_FCT     smmddac_        ( Int *,     Int *,     char *,
                                 char *,    Int *,     char *,
                                 char *,    Int * );
F_VOID_FCT     dmmddac_        ( Int *,     Int *,     char *,
                                 char *,    Int *,     char *,
                                 char *,    Int * );
F_VOID_FCT     cmmddac_        ( Int *,     Int *,     char *,
                                 char *,    Int *,     char *,
                                 char *,    Int * );
F_VOID_FCT     zmmddac_        ( Int *,     Int *,     char *,
                                 char *,    Int *,     char *,
                                 char *,    Int * );

F_VOID_FCT     immddat_        ( Int *,     Int *,     char *,
                                 char *,    Int *,     char *,
                                 char *,    Int * );
F_VOID_FCT     smmddat_        ( Int *,     Int *,     char *,
                                 char *,    Int *,     char *,
                                 char *,    Int * );
F_VOID_FCT     dmmddat_        ( Int *,     Int *,     char *,
                                 char *,    Int *,     char *,
                                 char *,    Int * );
F_VOID_FCT     cmmddat_        ( Int *,     Int *,     char *,
                                 char *,    Int *,     char *,
                                 char *,    Int * );
F_VOID_FCT     zmmddat_        ( Int *,     Int *,     char *,
                                 char *,    Int *,     char *,
                                 char *,    Int * );

F_VOID_FCT     smmddact_       ( Int *,     Int *,     char *,
                                 char *,    Int *,     char *,
                                 char *,    Int * );
F_VOID_FCT     dmmddact_       ( Int *,     Int *,     char *,
                                 char *,    Int *,     char *,
                                 char *,    Int * );
F_VOID_FCT     cmmddact_       ( Int *,     Int *,     char *,
                                 char *,    Int *,     char *,
                                 char *,    Int * );
F_VOID_FCT     zmmddact_       ( Int *,     Int *,     char *,
                                 char *,    Int *,     char *,
                                 char *,    Int * );

F_VOID_FCT     sasqrtb_        ( float *,   float *,   float * );
F_VOID_FCT     dasqrtb_        ( double *,  double *,  double * );

F_VOID_FCT     sset_           ( Int *,     char *,    char *,
                                 Int * );
F_VOID_FCT     dset_           ( Int *,     char *,    char *,
                                 Int * );
F_VOID_FCT     cset_           ( Int *,     char *,    char *,
                                 Int * );
F_VOID_FCT     zset_           ( Int *,     char *,    char *,
                                 Int * );

F_VOID_FCT     svasum_         ( Int *,     char *,    char *,
                                 Int * );
F_VOID_FCT     dvasum_         ( Int *,     char *,    char *,
                                 Int * );
F_VOID_FCT     scvasum_        ( Int *,     char *,    char *,
                                 Int * );
F_VOID_FCT     dzvasum_        ( Int *,     char *,    char *,
                                 Int * );

F_VOID_FCT     sascal_         ( Int *,     char *,    char *,
                                 Int * );
F_VOID_FCT     dascal_         ( Int *,     char *,    char *,
                                 Int * );

F_VOID_FCT     scshft_         ( Int *,     Int *,     Int *,
                                 char *,    Int * );
F_VOID_FCT     dcshft_         ( Int *,     Int *,     Int *,
                                 char *,    Int * );
F_VOID_FCT     ccshft_         ( Int *,     Int *,     Int *,
                                 char *,    Int * );
F_VOID_FCT     zcshft_         ( Int *,     Int *,     Int *,
                                 char *,    Int * );

F_VOID_FCT     srshft_         ( Int *,     Int *,     Int *,
                                 char *,    Int * );
F_VOID_FCT     drshft_         ( Int *,     Int *,     Int *,
                                 char *,    Int * );
F_VOID_FCT     crshft_         ( Int *,     Int *,     Int *,
                                 char *,    Int * );
F_VOID_FCT     zrshft_         ( Int *,     Int *,     Int *,
                                 char *,    Int * );

F_VOID_FCT     svvdot_         ( Int *,     char *,    char *,
                                 Int *,     char *,    Int * );
F_VOID_FCT     dvvdot_         ( Int *,     char *,    char *,
                                 Int *,     char *,    Int * );
F_VOID_FCT     cvvdotu_        ( Int *,     char *,    char *,
                                 Int *,     char *,    Int * );
F_VOID_FCT     cvvdotc_        ( Int *,     char *,    char *,
                                 Int *,     char *,    Int * );
F_VOID_FCT     zvvdotu_        ( Int *,     char *,    char *,
                                 Int *,     char *,    Int * );
F_VOID_FCT     zvvdotc_        ( Int *,     char *,    char *,
                                 Int *,     char *,    Int * );

F_VOID_FCT     stzpad_         ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     Int *,     char *,
                                 char *,    char *,    Int * );
F_VOID_FCT     dtzpad_         ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     Int *,     char *,
                                 char *,    char *,    Int * );
F_VOID_FCT     ctzpad_         ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     Int *,     char *,
                                 char *,    char *,    Int * );
F_VOID_FCT     ztzpad_         ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     Int *,     char *,
                                 char *,    char *,    Int * );

F_VOID_FCT     stzpadcpy_      ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     Int *,     char *,
                                 Int *,     char *,    Int * );
F_VOID_FCT     dtzpadcpy_      ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     Int *,     char *,
                                 Int *,     char *,    Int * );
F_VOID_FCT     ctzpadcpy_      ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     Int *,     char *,
                                 Int *,     char *,    Int * );
F_VOID_FCT     ztzpadcpy_      ( F_CHAR_T,  F_CHAR_T,  Int *,
                                 Int *,     Int *,     char *,
                                 Int *,     char *,    Int * );

F_VOID_FCT     stzscal_        ( F_CHAR_T,  Int *,     Int *,
                                 Int *,     char *,    char *,
                                 Int * );
F_VOID_FCT     dtzscal_        ( F_CHAR_T,  Int *,     Int *,
                                 Int *,     char *,    char *,
                                 Int * );
F_VOID_FCT     ctzscal_        ( F_CHAR_T,  Int *,     Int *,
                                 Int *,     char *,    char *,
                                 Int * );
F_VOID_FCT     ztzscal_        ( F_CHAR_T,  Int *,     Int *,
                                 Int *,     char *,    char *,
                                 Int * );

F_VOID_FCT     chescal_        ( F_CHAR_T,  Int *,     Int *,
                                 Int *,     char *,    char *,
                                 Int * );
F_VOID_FCT     zhescal_        ( F_CHAR_T,  Int *,     Int *,
                                 Int *,     char *,    char *,
                                 Int * );

F_VOID_FCT     ctzcnjg_        ( F_CHAR_T,  Int *,     Int *,
                                 Int *,     char *,    char *,
                                 Int * );
F_VOID_FCT     ztzcnjg_        ( F_CHAR_T,  Int *,     Int *,
                                 Int *,     char *,    char *,
                                 Int * );

F_VOID_FCT     sagemv_         ( F_CHAR_T,  Int *,     Int *,
                                 char *,    char *,    Int *,
                                 char *,    Int *,     char *,
                                 char *,    Int * );
F_VOID_FCT     dagemv_         ( F_CHAR_T,  Int *,     Int *,
                                 char *,    char *,    Int *,
                                 char *,    Int *,     char *,
                                 char *,    Int * );
F_VOID_FCT     cagemv_         ( F_CHAR_T,  Int *,     Int *,
                                 char *,    char *,    Int *,
                                 char *,    Int *,     char *,
                                 char *,    Int * );
F_VOID_FCT     zagemv_         ( F_CHAR_T,  Int *,     Int *,
                                 char *,    char *,    Int *,
                                 char *,    Int *,     char *,
                                 char *,    Int * );

F_VOID_FCT     sasymv_         ( F_CHAR_T,  Int *,     char *,
                                 char *,    Int *,     char *,
                                 Int *,     char *,    char *,
                                 Int * );
F_VOID_FCT     dasymv_         ( F_CHAR_T,  Int *,     char *,
                                 char *,    Int *,     char *,
                                 Int *,     char *,    char *,
                                 Int * );
F_VOID_FCT     casymv_         ( F_CHAR_T,  Int *,     char *,
                                 char *,    Int *,     char *,
                                 Int *,     char *,    char *,
                                 Int * );
F_VOID_FCT     zasymv_         ( F_CHAR_T,  Int *,     char *,
                                 char *,    Int *,     char *,
                                 Int *,     char *,    char *,
                                 Int * );
F_VOID_FCT     cahemv_         ( F_CHAR_T,  Int *,     char *,
                                 char *,    Int *,     char *,
                                 Int *,     char *,    char *,
                                 Int * );
F_VOID_FCT     zahemv_         ( F_CHAR_T,  Int *,     char *,
                                 char *,    Int *,     char *,
                                 Int *,     char *,    char *,
                                 Int * );

F_VOID_FCT     satrmv_         ( F_CHAR_T,  F_CHAR_T,  F_CHAR_T,
                                 Int *,     char *,    char *,
                                 Int *,     char *,    Int *,
                                 char *,    char *,    Int * );
F_VOID_FCT     datrmv_         ( F_CHAR_T,  F_CHAR_T,  F_CHAR_T,
                                 Int *,     char *,    char *,
                                 Int *,     char *,    Int *,
                                 char *,    char *,    Int * );
F_VOID_FCT     catrmv_         ( F_CHAR_T,  F_CHAR_T,  F_CHAR_T,
                                 Int *,     char *,    char *,
                                 Int *,     char *,    Int *,
                                 char *,    char *,    Int * );
F_VOID_FCT     zatrmv_         ( F_CHAR_T,  F_CHAR_T,  F_CHAR_T,
                                 Int *,     char *,    char *,
                                 Int *,     char *,    Int *,
                                 char *,    char *,    Int * );

F_VOID_FCT     csymv_          ( F_CHAR_T,  Int *,     char *,
                                 char *,    Int *,     char *,
                                 Int *,     char *,    char *,
                                 Int * );
F_VOID_FCT     zsymv_          ( F_CHAR_T,  Int *,     char *,
                                 char *,    Int *,     char *,
                                 Int *,     char *,    char *,
                                 Int * );

F_VOID_FCT     csyr_           ( F_CHAR_T,  Int *,     char *,
                                 char *,    Int *,     char *,
                                 Int * );
F_VOID_FCT     zsyr_           ( F_CHAR_T,  Int *,     char *,
                                 char *,    Int *,     char *,
                                 Int * );

F_VOID_FCT     csyr2_          ( F_CHAR_T,  Int *,     char *,
                                 char *,    Int *,     char *,
                                 Int *,     char *,    Int * );
F_VOID_FCT     zsyr2_          ( F_CHAR_T,  Int *,     char *,
                                 char *,    Int *,     char *,
                                 Int *,     char *,    Int * );

void           PB_Ctzsyr       ( PBTYP_T *, char *,    Int,
                                 Int,       Int,       Int,
                                 char *,    char *,    Int,
                                 char *,    Int,       char *,
                                 Int );
void           PB_Ctzher       ( PBTYP_T *, char *,    Int,
                                 Int,       Int,       Int,
                                 char *,    char *,    Int,
                                 char *,    Int,       char *,
                                 Int );
void           PB_Ctzsyr2      ( PBTYP_T *, char *,    Int,
                                 Int,       Int,       Int,
                                 char *,    char *,    Int,
                                 char *,    Int,       char *,
                                 Int,       char *,    Int,
                                 char *,    Int );
void           PB_Ctzher2      ( PBTYP_T *, char *,    Int,
                                 Int,       Int,       Int,
                                 char *,    char *,    Int,
                                 char *,    Int,       char *,
                                 Int,       char *,    Int,
                                 char *,    Int );
void           PB_Ctztrmv      ( PBTYP_T *, char *,    char *,
                                 char *,    char *,    Int,
                                 Int,       Int,       Int,
                                 char *,    char *,    Int,
                                 char *,    Int,       char *,
                                 Int );
void           PB_Ctzatrmv     ( PBTYP_T *, char *,    char *,
                                 char *,    char *,    Int,
                                 Int,       Int,       Int,
                                 char *,    char *,    Int,
                                 char *,    Int,       char *,
                                 Int );
void           PB_Ctzsymv      ( PBTYP_T *, char *,    char *,
                                 Int,       Int,       Int,
                                 Int,       char *,    char *,
                                 Int,       char *,    Int,
                                 char *,    Int,       char *,
                                 Int,       char *,    Int );
void           PB_Ctzhemv      ( PBTYP_T *, char *,    char *,
                                 Int,       Int,       Int,
                                 Int,       char *,    char *,
                                 Int,       char *,    Int,
                                 char *,    Int,       char *,
                                 Int,       char *,    Int );
void           PB_Ctzasymv     ( PBTYP_T *, char *,    char *,
                                 Int,       Int,       Int,
                                 Int,       char *,    char *,
                                 Int,       char *,    Int,
                                 char *,    Int,       char *,
                                 Int,       char *,    Int );
void           PB_Ctzahemv     ( PBTYP_T *, char *,    char *,
                                 Int,       Int,       Int,
                                 Int,       char *,    char *,
                                 Int,       char *,    Int,
                                 char *,    Int,       char *,
                                 Int,       char *,    Int );

void           PB_Ctzsyrk      ( PBTYP_T *, char *,    Int,
                                 Int,       Int,       Int,
                                 char *,    char *,    Int,
                                 char *,    Int,       char *,
                                 Int );
void           PB_Ctzherk      ( PBTYP_T *, char *,    Int,
                                 Int,       Int,       Int,
                                 char *,    char *,    Int,
                                 char *,    Int,       char *,
                                 Int );
void           PB_Ctzsyr2k     ( PBTYP_T *, char *,    Int,
                                 Int,       Int,       Int,
                                 char *,    char *,    Int,
                                 char *,    Int,       char *,
                                 Int,       char *,    Int,
                                 char *,    Int );
void           PB_Ctzher2k     ( PBTYP_T *, char *,    Int,
                                 Int,       Int,       Int,
                                 char *,    char *,    Int,
                                 char *,    Int,       char *,
                                 Int,       char *,    Int,
                                 char *,    Int );
void           PB_Ctztrmm      ( PBTYP_T *, char *,    char *,
                                 char *,    char *,    Int,
                                 Int,       Int,       Int,
                                 char *,    char *,    Int,
                                 char *,    Int,       char *,
                                 Int );
void           PB_Ctzsymm      ( PBTYP_T *, char *,    char *,
                                 Int,       Int,       Int,
                                 Int,       char *,    char *,
                                 Int,       char *,    Int,
                                 char *,    Int,       char *,
                                 Int,       char *,    Int );
void           PB_Ctzhemm      ( PBTYP_T *, char *,    char *,
                                 Int,       Int,       Int,
                                 Int,       char *,    char *,
                                 Int,       char *,    Int,
                                 char *,    Int,       char *,
                                 Int,       char *,    Int );

void           PB_CpswapNN     ( PBTYP_T *, Int,       char *,
                                 Int,       Int,       Int *,
                                 Int,       char *,    Int,
                                 Int,       Int *,     Int );
void           PB_CpswapND     ( PBTYP_T *, Int,       char *,
                                 Int,       Int,       Int *,
                                 Int,       char *,    Int,
                                 Int,       Int *,     Int );
void           PB_Cpdot11      ( PBTYP_T *, Int,       char *,
                                 char *,    Int,       Int,
                                 Int *,     Int,       char *,
                                 Int,       Int,       Int *,
                                 Int,       VVDOT_T );
void           PB_CpdotNN      ( PBTYP_T *, Int,       char *,
                                 char *,    Int,       Int,
                                 Int *,     Int,       char *,
                                 Int,       Int,       Int *,
                                 Int,       VVDOT_T );
void           PB_CpdotND      ( PBTYP_T *, Int,       char *,
                                 char *,    Int,       Int,
                                 Int *,     Int,       char *,
                                 Int,       Int,       Int *,
                                 Int,       VVDOT_T );
void           PB_CpaxpbyNN    ( PBTYP_T *, char *,    Int,
                                 Int,       char *,    char *,
                                 Int,       Int,       Int *,
                                 char *,    char *,    char *,
                                 Int,       Int,       Int *,
                                 char * );
void           PB_CpaxpbyND    ( PBTYP_T *, char *,    Int,
                                 Int,       char *,    char *,
                                 Int,       Int,       Int *,
                                 char *,    char *,    char *,
                                 Int,       Int,       Int *,
                                 char * );
void           PB_CpaxpbyDN    ( PBTYP_T *, char *,    Int,
                                 Int,       char *,    char *,
                                 Int,       Int,       Int *,
                                 char *,    char *,    char *,
                                 Int,       Int,       Int *,
                                 char * );
void           PB_Cpaxpby      ( PBTYP_T *, char *,    Int,
                                 Int,       char *,    char *,
                                 Int,       Int,       Int *,
                                 char *,    char *,    char *,
                                 Int,       Int,       Int *,
                                 char * );

void           PB_Cpsyr        ( PBTYP_T *, char *,    Int,
                                 Int,       char *,    char *,
                                 Int,       char *,    Int,
                                 char *,    Int,       Int,
                                 Int *,     TZSYR_T );
void           PB_Cpsyr2       ( PBTYP_T *, char *,    Int,
                                 Int,       char *,    char *,
                                 Int,       char *,    Int,
                                 char *,    Int,       char *,
                                 Int,       char *,    Int,
                                 Int,       Int *,     TZSYR2_T );
void           PB_Cptrm        ( PBTYP_T *, PBTYP_T *, char *,
                                 char *,    char *,    char *,
                                 Int,       Int,       char *,
                                 char *,    Int,       Int,
                                 Int *,     char *,    Int,
                                 char *,    Int,       TZTRM_T );
void           PB_Cpsym        ( PBTYP_T *, PBTYP_T *, char *,
                                 char *,    Int,       Int,
                                 char *,    char *,    Int,
                                 Int,       Int *,     char *,
                                 Int,       char *,    Int,
                                 char *,    Int,       char *,
                                 Int,       TZSYM_T );
void           PB_Cpgeadd      ( PBTYP_T *, char *,    char *,
                                 char *,    Int,       Int,
                                 char *,    char *,    Int,
                                 Int,       Int *,     char *,
                                 char *,    Int,       Int,
                                 Int * );
void           PB_Cptradd      ( PBTYP_T *, char *,    char *,
                                 char *,    Int,       Int,
                                 char *,    char *,    Int,
                                 Int,       Int *,     char *,
                                 char *,    Int,       Int,
                                 Int * );
void           PB_Cptran       ( PBTYP_T *, char *,    Int,
                                 Int,       char *,    char *,
                                 Int,       Int,       Int *,
                                 char *,    char *,    Int,
                                 Int,       Int * );
void           PB_Cptrsv       ( PBTYP_T *, Int,       char *,
                                 char *,    char *,    Int,
                                 char *,    Int,       Int,
                                 Int *,     char *,    Int,
                                 char *,    Int );
void           PB_Cptrsm       ( PBTYP_T *, Int,       char *,
                                 char *,    char *,    char *,
                                 Int,       Int,       char *,
                                 char *,    Int,       Int,
                                 Int *,     char *,    Int,
                                 char *,    Int );

void           PB_CpgemmAB     ( PBTYP_T *, char *,    char *,
                                 char *,    char *,    Int,
                                 Int,       Int,       char *,
                                 char *,    Int,       Int,
                                 Int *,     char *,    Int,
                                 Int,       Int *,     char *,
                                 char *,    Int,       Int,
                                 Int * );
void           PB_CpgemmAC     ( PBTYP_T *, char *,    char *,
                                 char *,    char *,    Int,
                                 Int,       Int,       char *,
                                 char *,    Int,       Int,
                                 Int *,     char *,    Int,
                                 Int,       Int *,     char *,
                                 char *,    Int,       Int,
                                 Int * );
void           PB_CpgemmBC     ( PBTYP_T *, char *,    char *,
                                 char *,    char *,    Int,
                                 Int,       Int,       char *,
                                 char *,    Int,       Int,
                                 Int *,     char *,    Int,
                                 Int,       Int *,     char *,
                                 char *,    Int,       Int,
                                 Int * );
void           PB_CpsymmAB     ( PBTYP_T *, char *,    char *,
                                 char *,    char *,    Int,
                                 Int,       char *,    char *,
                                 Int,       Int,       Int *,
                                 char *,    Int,       Int,
                                 Int *,     char *,    char *,
                                 Int,       Int,       Int * );
void           PB_CpsymmBC     ( PBTYP_T *, char *,    char *,
                                 char *,    char *,    Int,
                                 Int,       char *,    char *,
                                 Int,       Int,       Int *,
                                 char *,    Int,       Int,
                                 Int *,     char *,    char *,
                                 Int,       Int,       Int * );
void           PB_CpsyrkA      ( PBTYP_T *, char *,    char *,
                                 char *,    char *,    Int,
                                 Int,       char *,    char *,
                                 Int,       Int,       Int *,
                                 char *,    char *,    Int,
                                 Int,       Int * );
void           PB_CpsyrkAC     ( PBTYP_T *, char *,    char *,
                                 char *,    char *,    Int,
                                 Int,       char *,    char *,
                                 Int,       Int,       Int *,
                                 char *,    char *,    Int,
                                 Int,       Int * );
void           PB_Cpsyr2kA     ( PBTYP_T *, char *,    char *,
                                 char *,    char *,    Int,
                                 Int,       char *,    char *,
                                 Int,       Int,       Int *,
                                 char *,    Int,       Int,
                                 Int *,     char *,    char *,
                                 Int,       Int,       Int * );
void           PB_Cpsyr2kAC    ( PBTYP_T *, char *,    char *,
                                 char *,    char *,    Int,
                                 Int,       char *,    char *,
                                 Int,       Int,       Int *,
                                 char *,    Int,       Int,
                                 Int *,     char *,    char *,
                                 Int,       Int,       Int * );
void           PB_CptrmmAB     ( PBTYP_T *, char *,    char *,
                                 char *,    char *,    char *,
                                 Int,       Int,       char *,
                                 char *,    Int,       Int,
                                 Int *,     char *,    Int,
                                 Int,       Int * );
void           PB_CptrmmB      ( PBTYP_T *, char *,    char *,
                                 char *,    char *,    char *,
                                 Int,       Int,       char *,
                                 char *,    Int,       Int,
                                 Int *,     char *,    Int,
                                 Int,       Int * );
void           PB_CptrsmAB     ( PBTYP_T *, char *,    char *,
                                 char *,    char *,    char *,
                                 Int,       Int,       char *,
                                 char *,    Int,       Int,
                                 Int *,     char *,    Int,
                                 Int,       Int * );
void           PB_CptrsmAB0    ( PBTYP_T *, char *,    char *,
                                 char *,    Int,       Int,
                                 char *,    char *,    Int,
                                 Int,       Int *,     char *,
                                 Int,       Int,       Int *,
                                 char * *,  Int *,     Int * );
void           PB_CptrsmAB1    ( PBTYP_T *, char *,    char *,
                                 char *,    char *,    Int,
                                 Int,       char *,    char *,
                                 Int,       Int,       Int *,
                                 char *,    Int,       Int,
                                 Int *,     char *,    Int * );
void           PB_CptrsmB      ( PBTYP_T *, char *,    char *,
                                 char *,    char *,    char *,
                                 Int,       Int,       char *,
                                 char *,    Int,       Int,
                                 Int *,     char *,    Int,
                                 Int,       Int * );
#else

F_VOID_FCT     immadd_         ();
F_VOID_FCT     smmadd_         ();
F_VOID_FCT     dmmadd_         ();
F_VOID_FCT     cmmadd_         ();
F_VOID_FCT     zmmadd_         ();

F_VOID_FCT     smmcadd_        ();
F_VOID_FCT     dmmcadd_        ();
F_VOID_FCT     cmmcadd_        ();
F_VOID_FCT     zmmcadd_        ();

F_VOID_FCT     immtadd_        ();
F_VOID_FCT     smmtadd_        ();
F_VOID_FCT     dmmtadd_        ();
F_VOID_FCT     cmmtadd_        ();
F_VOID_FCT     zmmtadd_        ();

F_VOID_FCT     smmtcadd_       ();
F_VOID_FCT     dmmtcadd_       ();
F_VOID_FCT     cmmtcadd_       ();
F_VOID_FCT     zmmtcadd_       ();

F_VOID_FCT     immdda_         ();
F_VOID_FCT     smmdda_         ();
F_VOID_FCT     dmmdda_         ();
F_VOID_FCT     cmmdda_         ();
F_VOID_FCT     zmmdda_         ();

F_VOID_FCT     smmddac_        ();
F_VOID_FCT     dmmddac_        ();
F_VOID_FCT     cmmddac_        ();
F_VOID_FCT     zmmddac_        ();

F_VOID_FCT     immddat_        ();
F_VOID_FCT     smmddat_        ();
F_VOID_FCT     dmmddat_        ();
F_VOID_FCT     cmmddat_        ();
F_VOID_FCT     zmmddat_        ();

F_VOID_FCT     smmddact_       ();
F_VOID_FCT     dmmddact_       ();
F_VOID_FCT     cmmddact_       ();
F_VOID_FCT     zmmddact_       ();

F_VOID_FCT     sasqrtb_        ();
F_VOID_FCT     dasqrtb_        ();

F_VOID_FCT     sset_           ();
F_VOID_FCT     dset_           ();
F_VOID_FCT     cset_           ();
F_VOID_FCT     zset_           ();

F_VOID_FCT     svasum_         ();
F_VOID_FCT     dvasum_         ();
F_VOID_FCT     scvasum_        ();
F_VOID_FCT     dzvasum_        ();

F_VOID_FCT     sascal_         ();
F_VOID_FCT     dascal_         ();

F_VOID_FCT     scshft_         ();
F_VOID_FCT     dcshft_         ();
F_VOID_FCT     ccshft_         ();
F_VOID_FCT     zcshft_         ();

F_VOID_FCT     srshft_         ();
F_VOID_FCT     drshft_         ();
F_VOID_FCT     crshft_         ();
F_VOID_FCT     zrshft_         ();

F_VOID_FCT     svvdot_         ();
F_VOID_FCT     dvvdot_         ();
F_VOID_FCT     cvvdotc_        ();
F_VOID_FCT     cvvdotu_        ();
F_VOID_FCT     zvvdotc_        ();
F_VOID_FCT     zvvdotu_        ();

F_VOID_FCT     stzpad_         ();
F_VOID_FCT     dtzpad_         ();
F_VOID_FCT     ctzpad_         ();
F_VOID_FCT     ztzpad_         ();

F_VOID_FCT     stzpadcpy_      ();
F_VOID_FCT     dtzpadcpy_      ();
F_VOID_FCT     ctzpadcpy_      ();
F_VOID_FCT     ztzpadcpy_      ();

F_VOID_FCT     stzscal_        ();
F_VOID_FCT     dtzscal_        ();
F_VOID_FCT     ctzscal_        ();
F_VOID_FCT     ztzscal_        ();

F_VOID_FCT     chescal_        ();
F_VOID_FCT     zhescal_        ();

F_VOID_FCT     ctzcnjg_        ();
F_VOID_FCT     ztzcnjg_        ();

F_VOID_FCT     sagemv_         ();
F_VOID_FCT     dagemv_         ();
F_VOID_FCT     cagemv_         ();
F_VOID_FCT     zagemv_         ();

F_VOID_FCT     sasymv_         ();
F_VOID_FCT     dasymv_         ();
F_VOID_FCT     casymv_         ();
F_VOID_FCT     zasymv_         ();
F_VOID_FCT     cahemv_         ();
F_VOID_FCT     zahemv_         ();

F_VOID_FCT     satrmv_         ();
F_VOID_FCT     datrmv_         ();
F_VOID_FCT     catrmv_         ();
F_VOID_FCT     zatrmv_         ();

F_VOID_FCT     csymv_          ();
F_VOID_FCT     zsymv_          ();

F_VOID_FCT     csyr_           ();
F_VOID_FCT     zsyr_           ();

F_VOID_FCT     csyr2_          ();
F_VOID_FCT     zsyr2_          ();

void           PB_Ctzsyr       ();
void           PB_Ctzher       ();
void           PB_Ctzsyr2      ();
void           PB_Ctzher2      ();
void           PB_Ctztrmv      ();
void           PB_Ctzatrmv     ();
void           PB_Ctzsymv      ();
void           PB_Ctzhemv      ();
void           PB_Ctzasymv     ();
void           PB_Ctzahemv     ();
void           PB_Ctzsyrk      ();
void           PB_Ctzherk      ();
void           PB_Ctzsyr2k     ();
void           PB_Ctzher2k     ();
void           PB_Ctztrmm      ();
void           PB_Ctzsymm      ();
void           PB_Ctzhemm      ();

void           PB_CpswapNN     ();
void           PB_CpswapND     ();
void           PB_Cpdot11      ();
void           PB_CpdotNN      ();
void           PB_CpdotND      ();
void           PB_CpaxpbyNN    ();
void           PB_CpaxpbyND    ();
void           PB_CpaxpbyDN    ();
void           PB_Cpaxpby      ();

void           PB_Cpsyr        ();
void           PB_Cpsyr2       ();
void           PB_Cptrm        ();
void           PB_Cpsym        ();
void           PB_Cpgeadd      ();
void           PB_Cptradd      ();
void           PB_Cptran       ();
void           PB_Cptrsv       ();
void           PB_Cptrsm       ();

void           PB_CpgemmAB     ();
void           PB_CpgemmAC     ();
void           PB_CpgemmBC     ();
void           PB_CpsymmAB     ();
void           PB_CpsymmBC     ();
void           PB_CpsyrkA      ();
void           PB_CpsyrkAC     ();
void           PB_Cpsyr2kA     ();
void           PB_Cpsyr2kAC    ();
void           PB_CptrmmAB     ();
void           PB_CptrmmB      ();
void           PB_CptrsmAB     ();
void           PB_CptrsmAB0    ();
void           PB_CptrsmAB1    ();
void           PB_CptrsmB      ();

#endif
                                                             /* TOOLS */
#ifdef __STDC__

Int            PB_Cgcd         ( Int,       Int );
Int            PB_Clcm         ( Int,       Int );

void           PB_Cdescset     ( Int *,     Int,       Int,
                                 Int,       Int,       Int,
                                 Int,       Int,       Int,
                                 Int,       Int );
void           PB_Cdescribe    ( Int,       Int,       Int,
                                 Int,       Int *,     Int,
                                 Int,       Int,       Int,
                                 Int *,     Int *,     Int *,
                                 Int *,     Int *,     Int *,
                                 Int *,     Int *,     Int *,
                                 Int * );
void           PB_CargFtoC     ( Int,       Int,       Int *,
                                 Int *,     Int *,     Int * );
Int            PB_Cfirstnb     ( Int,       Int,       Int,
                                 Int );
Int            PB_Clastnb      ( Int,       Int,       Int,
                                 Int );
Int            PB_Cspan        ( Int,       Int,       Int,
                                 Int,       Int,       Int );

void           PB_Cainfog2l    ( Int,       Int,       Int,
                                 Int,       Int *,     Int,
                                 Int,       Int,       Int,
                                 Int *,     Int *,     Int *,
                                 Int *,     Int *,     Int *,
                                 Int *,     Int *,     Int *,
                                 Int * );
void           PB_Cinfog2l     ( Int,       Int,       Int *,
                                 Int,       Int,       Int,
                                 Int,       Int *,     Int *,
                                 Int *,     Int * );
Int            PB_Cg2lrem      ( Int,       Int,       Int,
                                 Int,       Int,       Int );
Int            PB_Cindxg2p     ( Int,       Int,       Int,
                                 Int,       Int,       Int );
Int            PB_Cnumroc      ( Int,       Int,       Int,
                                 Int,       Int,       Int,
                                 Int );
Int            PB_Cnpreroc     ( Int,       Int,       Int,
                                 Int,       Int,       Int,
                                 Int );
Int            PB_Cnnxtroc     ( Int,       Int,       Int,
                                 Int,       Int,       Int,
                                 Int );

void           PB_Cconjg       ( PBTYP_T *, char *,    char * );


void           PB_Cwarn        ( Int,       Int,       char *,
                                 char *,    ... );
void           PB_Cabort       ( Int,       char *,    Int );
void           PB_Cchkmat      ( Int,       char *,    char *,
                                 Int,       Int,       Int,
                                 Int,       Int,       Int,
                                 Int *,     Int,       Int * );
void           PB_Cchkvec      ( Int,       char *,    char *,
                                 Int,       Int ,       Int ,
                                 Int,       Int *,     Int,
                                 Int,       Int * );

char *         PB_Cmalloc      ( Int );
char *         PB_Cgetbuf      ( char *,    Int );

PBTYP_T *      PB_Citypeset    ( void );
PBTYP_T *      PB_Cstypeset    ( void );
PBTYP_T *      PB_Cdtypeset    ( void );
PBTYP_T *      PB_Cctypeset    ( void );
PBTYP_T *      PB_Cztypeset    ( void );

Int            pilaenv_        ( Int *,     F_CHAR_T );
char *         PB_Ctop         ( Int *,     char *,    char *,
                                 char * );

void           PB_CVMinit      ( PB_VM_T *, Int,       Int,
                                 Int,       Int,       Int,
                                 Int,       Int,       Int,
                                 Int,       Int,       Int,
                                 Int );
Int            PB_CVMnpq       ( PB_VM_T * );
void           PB_CVMcontig    ( PB_VM_T *, Int *,     Int *,
                                 Int *,     Int * );
Int            PB_CVMloc       ( PBTYP_T *, PB_VM_T *, char *,
                                 char *,    char *,    char *,
                                 Int,       Int,       char *,
                                 char *,    Int,       char *,
                                 char *,    Int );
Int            PB_CVMswp       ( PBTYP_T *, PB_VM_T *, char *,
                                 char *,    char *,    Int,
                                 char *,    Int,       char *,
                                 Int );
Int            PB_CVMpack      ( PBTYP_T *, PB_VM_T *, char *,
                                 char *,    char *,    char *,
                                 Int,       Int,       char *,
                                 char *,    Int,       char *,
                                 char *,    Int );
void           PB_CVMupdate    ( PB_VM_T *, Int,       Int *,
                                 Int * );

void           PB_Cbinfo       ( Int,       Int,       Int,
                                 Int,       Int,       Int,
                                 Int,       Int,       Int,
                                 Int *,     Int *,     Int *,
                                 Int *,     Int *,     Int *,
                                 Int *,     Int *,     Int *,
                                 Int *,     Int * );

void           PB_Cplaprnt     ( PBTYP_T *, Int,       Int,
                                 char *,    Int,       Int,
                                 Int *,     Int,       Int,
                                 char * );
void           PB_Cplaprn2     ( PBTYP_T *, Int,       Int,
                                 char *,    Int,       Int,
                                 Int *,     Int,       Int,
                                 char *,    Int,       Int );
void           PB_Cprnt        ( char,      Int,       Int,
                                 Int,       char *,    Int,
                                 Int,       char * );

void           PB_Cplapad      ( PBTYP_T *, char *,    char *,
                                 Int,       Int,       char *,
                                 char *,    char *,    Int,
                                 Int,       Int * );
void           PB_Cplapd2      ( PBTYP_T *, char *,    char *,
                                 Int,       Int,       char *,
                                 char *,    char *,    Int,
                                 Int,       Int * );
void           PB_Cplascal     ( PBTYP_T *, char *,    char *,
                                 Int,       Int,       char *,
                                 char *,    Int,       Int,
                                 Int * );
void           PB_Cplasca2     ( PBTYP_T *, char *,    char *,
                                 Int,       Int,       char *,
                                 char *,    Int,       Int,
                                 Int * );
void           PB_Cplacnjg     ( PBTYP_T *, Int,       Int,
                                 char *,    char *,    Int,
                                 Int,       Int * );

void           PB_CInV         ( PBTYP_T *, char *,    char *,
                                 Int,       Int,       Int *,
                                 Int,       char *,    Int,
                                 Int,       Int *,     char *,
                                 char * *,  Int *,     Int * );
void           PB_CInV2        ( PBTYP_T *, char *,    char *,
                                 Int,       Int,       Int *,
                                 Int,       char *,    Int,
                                 Int,       Int *,     char *,
                                 char *,    Int,       Int * );
void           PB_CInOutV      ( PBTYP_T *, char *,    Int,
                                 Int,       Int *,     Int,
                                 char *,    char *,    Int,
                                 Int,       Int *,     char *,
                                 char * *,  char * *,  Int *,
                                 Int *,     Int *,     Int * );
void           PB_CInOutV2     ( PBTYP_T *, char *,    char *,
                                 Int,       Int,       Int,
                                 Int *,     Int,       char *,
                                 Int,       Int,       Int *,
                                 char *,    char * *,  Int *,
                                 Int *,     Int *,     Int * );
void           PB_COutV        ( PBTYP_T *, char *,    char *,
                                 Int,       Int,       Int *,
                                 Int,       char * *,  Int *,
                                 Int *,     Int * );
void           PB_CGatherV     ( PBTYP_T *, char *,    char *,
                                 Int,       Int,       char *,
                                 Int,       Int,       Int *,
                                 char *,    char * *,  Int *,
                                 Int * );
void           PB_CScatterV    ( PBTYP_T *, char *,    Int,
                                 Int,       char *,    Int,
                                 Int,       Int *,     char *,
                                 char *,    char *,    Int,
                                 Int,       Int *,     char * );
#else

Int            PB_Cgcd         ();
Int            PB_Clcm         ();

void           PB_Cdescset     ();
void           PB_Cdescribe    ();
void           PB_CargFtoC     ();
Int            PB_Cfirstnb     ();
Int            PB_Clastnb      ();
Int            PB_Cspan        ();

void           PB_Cainfog2l    ();
void           PB_Cinfog2l     ();
Int            PB_Cg2lrem      ();
Int            PB_Cindxg2p     ();
Int            PB_Cnumroc      ();
Int            PB_Cnpreroc     ();
Int            PB_Cnnxtroc     ();

void           PB_Cconjg       ();

void           PB_Cwarn        ();
void           PB_Cabort       ();
void           PB_Cchkmat      ();
void           PB_Cchkvec      ();

char *         PB_Cmalloc      ();
char *         PB_Cgetbuf      ();

PBTYP_T *      PB_Citypeset    ();
PBTYP_T *      PB_Cstypeset    ();
PBTYP_T *      PB_Cdtypeset    ();
PBTYP_T *      PB_Cctypeset    ();
PBTYP_T *      PB_Cztypeset    ();

Int            pilaenv_        ();
char *         PB_Ctop         ();

void           PB_CVMinit      ();
Int            PB_CVMnpq       ();
void           PB_CVMcontig    ();
Int            PB_CVMloc       ();
Int            PB_CVMswp       ();
Int            PB_CVMpack      ();
void           PB_CVMupdate    ();

void           PB_Cbinfo       ();

void           PB_Cplaprnt     ();
void           PB_Cplaprn2     ();
void           PB_Cprnt        ();

void           PB_Cplapad      ();
void           PB_Cplapd2      ();
void           PB_Cplascal     ();
void           PB_Cplasca2     ();
void           PB_Cplacnjg     ();

void           PB_CInV         ();
void           PB_CInV2        ();
void           PB_CInOutV      ();
void           PB_CInOutV2     ();
void           PB_COutV        ();
void           PB_CGatherV     ();
void           PB_CScatterV    ();

#endif
//
//  lamov.h
//
//  Written by Lee Killough 04/19/2012
//  

#include "pblas.h"
#include <ctype.h>

extern void xerbla_(const char *, const F_INTG_FCT *, size_t);

void LACPY(const char *UPLO,
           const F_INTG_FCT *M,
           const F_INTG_FCT *N,
           const TYPE *A,
           const F_INTG_FCT *LDA,
           TYPE *B,
           const F_INTG_FCT *LDB);

void LAMOV(const char *UPLO,
           const F_INTG_FCT *M,
           const F_INTG_FCT *N,
           const TYPE *A,
           const F_INTG_FCT *LDA,
           TYPE *B,
           const F_INTG_FCT *LDB)
{
   const F_INTG_FCT m = *M;
   const F_INTG_FCT n = *N;
   const F_INTG_FCT lda = *LDA;
   const F_INTG_FCT ldb = *LDB;

   if (B + m-1 + ldb*(n-1) < A || A + m-1 + lda*(n-1) < B)
     {
       LACPY(UPLO, M, N, A, LDA, B, LDB);
     }
   else if (lda != ldb)
     {
       TYPE *tmp = malloc(sizeof(*A) * m * n);
       if (!tmp)
         {
           F_INTG_FCT info = -1;
           const char func[] = FUNC;
           xerbla_(func, &info, sizeof func);
         }
       else
         {
           LACPY(UPLO, M, N,   A, LDA, tmp,  &m);
           LACPY(UPLO, M, N, tmp,  &m,   B, LDB);
           free(tmp);
         }
     }
   else
     {
       F_INTG_FCT i, j;
       switch (toupper(*UPLO))
         {
         case 'U':
           if (A > B)
             {
               for (j=0; j<n; j++)
                 for (i=0; i<j && i<m; i++)
                   B[i+ldb*j] = A[i+lda*j];
             }
           else
             {
               for (j=n; --j>=0;)
                 for (i=j<m ? j : m; --i>=0;)
                   B[i+ldb*j] = A[i+lda*j];
             }
           break;
         
         case 'L':
           if (A > B)
             {
               for (j=0; j<n; j++)
                 for (i=j; i<m; i++)
                   B[i+ldb*j] = A[i+lda*j];
             }
           else
             {
               for (j=m<n ? m : n; --j>=0;)
                 for (i=m; --i>=j;)
                   B[i+ldb*j] = A[i+lda*j];
             }
           break;
         
         default:
           if (A > B)
             {
               for (j=0; j<n; j++)
                 for (i=0; i<m; i++)
                   B[i+ldb*j] = A[i+lda*j];
             }
           else
             {
               for (j=n; --j>=0;)
                 for (i=m; --i>=0;)
                   B[i+ldb*j] = A[i+lda*j];
             }
           break;
         }
     }
}
/* ---------------------------------------------------------------------
*
*  -- PBLAS routine (version 2.0) --
*     University of Tennessee, Knoxville, Oak Ridge National Laboratory,
*     and University of California, Berkeley.
*     April 1, 1998
*
*  ---------------------------------------------------------------------
*/
/*
*  This file includes the standard C libraries, as well as system depen-
*  dent include files. All PBLAS routines include this file.
*
*  ---------------------------------------------------------------------
*  Machine Specific PBLAS macros
*  ---------------------------------------------------------------------
*/
#define    _HAL_               0
#define    _T3D_               1
#define    _T3E_               2

#ifdef T3D
#define    _MACH_              _T3D_
#endif
#ifdef T3E
#define    _MACH_              _T3E_
#endif
#ifndef _MACH_
#define    _MACH_              _HAL_
#endif
/*
*  CBRATIO is the ratio of the transfer cost per element for the combine
*  sum to one process and the broadcast operation.  This  value  is used
*  within the Level 3 PBLAS routines to decide on which algorithm to se-
*  lect.
*/
#define    CBRATIO             1.3
/*
*  ---------------------------------------------------------------------
*  Include files
*  ---------------------------------------------------------------------
*/
#include <stdio.h>
#include <stdlib.h>

#ifdef __STDC__
#include <stdarg.h>
#else
#include <varargs.h>
#endif

#if( ( _MACH_ == _T3D_ ) || ( _MACH_ == _T3E_ ) )
#include <fortran.h>
#endif
/*
*  ---------------------------------------------------------------------
*  FORTRAN <-> C interface
*  ---------------------------------------------------------------------
*
*  These macros identifies how the PBLAS will be called as follows:
*
*  _F2C_ADD_: the FORTRAN compiler expects the name of C functions to be
*  in all lower case and to have an underscore postfixed it (Suns, Intel
*  compilers expect this).
*
*  _F2C_NOCHANGE: the FORTRAN compiler expects the name of  C  functions
*  to be in all lower case (IBM RS6K compilers do this).
*
*  _F2C_UPCASE: the  FORTRAN  compiler expects the name of  C  functions
*  to be in all upcase. (Cray compilers expect this).
*
*  _F2C_F77ISF2C: the  FORTRAN  compiler in use is f2c, a  FORTRAN  to C
*  converter.
*/
#define    _F2C_ADD_           0
#define    _F2C_NOCHANGE       1
#define    _F2C_UPCASE         2
#define    _F2C_F77ISF2C       3

#ifdef UpCase
#define    _F2C_CALL_          _F2C_UPCASE
#endif

#ifdef NoChange
#define    _F2C_CALL_          _F2C_NOCHANGE
#endif

#ifdef Add_
#define    _F2C_CALL_          _F2C_ADD_
#endif

#ifdef f77IsF2C
#define    _F2C_CALL_          _F2C_F77ISF2C
#endif

#ifndef _F2C_CALL_
#define    _F2C_CALL_          _F2C_ADD_
#endif
/*
*  ---------------------------------------------------------------------
*  TYPE DEFINITIONS AND CONVERSION UTILITIES
*  ---------------------------------------------------------------------
*/
#ifndef Int
#define Int int
#endif

#if( ( _MACH_ == _T3D_ ) || ( _MACH_ == _T3E_ ) )

#define    float               double
                      /* Type of character argument in a FORTRAN call */
#define    F_CHAR_T            _fcd
                                    /* Character conversion utilities */
#define    F2C_CHAR(a)         ( _fcdtocp( (a) ) )
#define    C2F_CHAR(a)         ( _cptofcd( (a), 1 ) )
                                         /* Type of FORTRAN functions */
#define    F_VOID_FCT          void   fortran           /* Subroutine */
#define    F_INTG_FCT          Int    fortran     /* INTEGER function */

#else                 /* Type of character argument in a FORTRAN call */

typedef    char *              F_CHAR_T;
                                    /* Character conversion utilities */
#define    F2C_CHAR(a)            (a)
#define    C2F_CHAR(a)            (a)
                                         /* Type of FORTRAN functions */
#define    F_VOID_FCT             void                  /* Subroutine */
#define    F_INTG_FCT             Int             /* INTEGER function */

#endif
/*
* ----------------------------------------------------------------------
*  #typedef definitions
*  ---------------------------------------------------------------------
*/
typedef    float               cmplx  [2];
typedef    double              cmplx16[2];

#define    REAL_PART           0
#define    IMAG_PART           1

#ifdef __STDC__

typedef void           (*GESD2D_T)   ( Int,       Int,       Int,
                                       char *,    Int,       Int,
                                       Int );
typedef void           (*GERV2D_T)   ( Int,       Int,       Int,
                                       char *,    Int,       Int,
                                       Int );
typedef void           (*GEBS2D_T)   ( Int,       char *,    char *,
                                       Int,       Int,       char *,
                                       Int );
typedef void           (*GEBR2D_T)   ( Int,       char *,    char *,
                                       Int,       Int,       char *,
                                       Int,       Int,       Int );
typedef void           (*GSUM2D_T)   ( Int,       char *,    char *,
                                       Int,       Int,       char *,
                                       Int,       Int,       Int );

typedef F_VOID_FCT     (*MMADD_T)    ( Int  *,    Int  *,    char *,
                                       char *,    Int  *,    char *,
                                       char *,    Int  * );
typedef F_VOID_FCT     (*MMSHFT_T)   ( Int  *,    Int  *,    Int *,
                                       char *,    Int  * );
typedef F_VOID_FCT     (*VVDOT_T)    ( Int  *,    char *,    char *,
                                       Int  *,    char *,    Int  * );
typedef F_VOID_FCT     (*VVSET_T)    ( Int  *,    char *,    char *,
                                       Int  * );
typedef F_VOID_FCT     (*TZPAD_T)    ( F_CHAR_T,  F_CHAR_T,  Int  *,
                                       Int  *,    Int  *,    char *,
                                       char *,    char *,    Int  * );
typedef F_VOID_FCT     (*TZPADCPY_T) ( F_CHAR_T,  F_CHAR_T,  Int  *,
                                       Int  *,    Int  *,    char *,
                                       Int *,     char *,    Int  * );
typedef F_VOID_FCT     (*TZSET_T)    ( F_CHAR_T,  Int  *,    Int  *,
                                       Int  *,    char *,    char *,
                                       char *,    Int  * );
typedef F_VOID_FCT     (*TZSCAL_T)   ( F_CHAR_T,  Int *,     Int  *,
                                       Int  *,    char *,    char *,
                                       Int  * );

typedef F_VOID_FCT     (*AXPY_T)     ( Int *,     char *,    char *,
                                       Int *,     char *,    Int * );
typedef F_VOID_FCT     (*COPY_T)     ( Int *,     char *,    Int *,
                                       char *,    Int * );
typedef F_VOID_FCT     (*SWAP_T)     ( Int *,     char *,    Int *,
                                       char *,    Int * );

typedef F_VOID_FCT     (*GEMV_T)     ( F_CHAR_T,  Int *,     Int *,
                                       char *,    char *,    Int *,
                                       char *,    Int *,     char *,
                                       char *,    Int * );
typedef F_VOID_FCT     (*AGEMV_T)    ( F_CHAR_T,  Int *,     Int *,
                                       char *,    char *,    Int *,
                                       char *,    Int *,     char *,
                                       char *,    Int * );
typedef F_VOID_FCT     (*SYMV_T)     ( F_CHAR_T,  Int *,     char *,
                                       char *,    Int *,     char *,
                                       Int *,     char *,    char *,
                                       Int * );
typedef F_VOID_FCT     (*ASYMV_T)    ( F_CHAR_T,  Int *,     char *,
                                       char *,    Int *,     char *,
                                       Int *,     char *,    char *,
                                       Int * );
typedef F_VOID_FCT     (*HEMV_T)     ( F_CHAR_T,  Int *,     char *,
                                       char *,    Int *,     char *,
                                       Int *,     char *,    char *,
                                       Int * );
typedef F_VOID_FCT     (*AHEMV_T)    ( F_CHAR_T,  Int *,     char *,
                                       char *,    Int *,     char *,
                                       Int *,     char *,    char *,
                                       Int * );
typedef F_VOID_FCT     (*TRMV_T)     ( F_CHAR_T,  F_CHAR_T,  F_CHAR_T,
                                       Int *,     char *,    Int *,
                                       char *,    Int * );
typedef F_VOID_FCT     (*ATRMV_T)    ( F_CHAR_T,  F_CHAR_T,  F_CHAR_T,
                                       Int *,     char *,    char *,
                                       Int *,     char *,    Int *,
                                       char *,    char *,    Int * );
typedef F_VOID_FCT     (*TRSV_T)     ( F_CHAR_T,  F_CHAR_T,  F_CHAR_T,
                                       Int *,     char *,    Int *,
                                       char *,    Int * );
typedef F_VOID_FCT     (*GERC_T)     ( Int *,     Int *,     char *,
                                       char *,    Int *,     char *,
                                       Int *,     char *,    Int * );
typedef F_VOID_FCT     (*GERU_T)     ( Int *,     Int *,     char *,
                                       char *,    Int *,     char *,
                                       Int *,     char *,    Int * );
typedef F_VOID_FCT     (*SYR_T)      ( F_CHAR_T,  Int *,     char *,
                                       char *,    Int *,     char *,
                                       Int * );
typedef F_VOID_FCT     (*HER_T)      ( F_CHAR_T,  Int *,     char *,
                                       char *,    Int *,     char *,
                                       Int * );
typedef F_VOID_FCT     (*SYR2_T)     ( F_CHAR_T,  Int *,     char *,
                                       char *,    Int *,     char *,
                                       Int *,     char *,    Int * );
typedef F_VOID_FCT     (*HER2_T)     ( F_CHAR_T,  Int *,     char *,
                                       char *,    Int *,     char *,
                                       Int *,     char *,    Int * );

typedef F_VOID_FCT     (*GEMM_T)     ( F_CHAR_T,  F_CHAR_T,  Int *,
                                       Int *,     Int *,     char *,
                                       char *,    Int *,     char *,
                                       Int *,     char *,    char *,
                                       Int * );
typedef F_VOID_FCT     (*SYMM_T)     ( F_CHAR_T,  F_CHAR_T,  Int *,
                                       Int *,     char *,    char *,
                                       Int *,     char *,    Int *,
                                       char *,    char *,    Int * );
typedef F_VOID_FCT     (*HEMM_T)     ( F_CHAR_T,  F_CHAR_T,  Int *,
                                       Int *,     char *,    char *,
                                       Int *,     char *,    Int *,
                                       char *,    char *,    Int * );
typedef F_VOID_FCT     (*SYRK_T)     ( F_CHAR_T,  F_CHAR_T,  Int *,
                                       Int *,     char *,    char *,
                                       Int *,     char *,    char *,
                                       Int * );
typedef F_VOID_FCT     (*HERK_T)     ( F_CHAR_T,  F_CHAR_T,  Int *,
                                       Int *,     char *,    char *,
                                       Int *,     char *,    char *,
                                       Int * );
typedef F_VOID_FCT     (*SYR2K_T)    ( F_CHAR_T,  F_CHAR_T,  Int *,
                                       Int *,     char *,    char *,
                                       Int *,     char *,    Int *,
                                       char *,    char *,    Int * );
typedef F_VOID_FCT     (*HER2K_T)    ( F_CHAR_T,  F_CHAR_T,  Int *,
                                       Int *,     char *,    char *,
                                       Int *,     char *,    Int *,
                                       char *,    char *,    Int * );
typedef F_VOID_FCT     (*TRMM_T)     ( F_CHAR_T,  F_CHAR_T,  F_CHAR_T,
                                       F_CHAR_T,  Int *,     Int *,
                                       char *,    char *,    Int *,
                                       char *,    Int * );
typedef F_VOID_FCT     (*TRSM_T)     ( F_CHAR_T,  F_CHAR_T,  F_CHAR_T,
                                       F_CHAR_T,  Int *,     Int *,
                                       char *,    char *,    Int *,
                                       char *,    Int * );

#else

typedef void           (*GESD2D_T)   ();
typedef void           (*GERV2D_T)   ();
typedef void           (*GEBS2D_T)   ();
typedef void           (*GEBR2D_T)   ();
typedef void           (*GSUM2D_T)   ();

typedef F_VOID_FCT     (*MMADD_T)    ();
typedef F_VOID_FCT     (*MMSHFT_T)   ();
typedef F_VOID_FCT     (*VVDOT_T)    ();
typedef F_VOID_FCT     (*VVSET_T)    ();
typedef F_VOID_FCT     (*TZPAD_T)    ();
typedef F_VOID_FCT     (*TZPADCPY_T) ();
typedef F_VOID_FCT     (*TZSET_T)    ();
typedef F_VOID_FCT     (*TZSCAL_T)   ();

typedef F_VOID_FCT     (*AXPY_T)     ();
typedef F_VOID_FCT     (*COPY_T)     ();
typedef F_VOID_FCT     (*SWAP_T)     ();

typedef F_VOID_FCT     (*GEMV_T)     ();
typedef F_VOID_FCT     (*AGEMV_T)    ();
typedef F_VOID_FCT     (*SYMV_T)     ();
typedef F_VOID_FCT     (*ASYMV_T)    ();
typedef F_VOID_FCT     (*HEMV_T)     ();
typedef F_VOID_FCT     (*AHEMV_T)    ();
typedef F_VOID_FCT     (*TRMV_T)     ();
typedef F_VOID_FCT     (*ATRMV_T)    ();
typedef F_VOID_FCT     (*TRSV_T)     ();
typedef F_VOID_FCT     (*GERC_T)     ();
typedef F_VOID_FCT     (*GERU_T)     ();
typedef F_VOID_FCT     (*SYR_T)      ();
typedef F_VOID_FCT     (*HER_T)      ();
typedef F_VOID_FCT     (*SYR2_T)     ();
typedef F_VOID_FCT     (*HER2_T)     ();

typedef F_VOID_FCT     (*GEMM_T)     ();
typedef F_VOID_FCT     (*SYMM_T)     ();
typedef F_VOID_FCT     (*HEMM_T)     ();
typedef F_VOID_FCT     (*SYRK_T)     ();
typedef F_VOID_FCT     (*HERK_T)     ();
typedef F_VOID_FCT     (*SYR2K_T)    ();
typedef F_VOID_FCT     (*HER2K_T)    ();
typedef F_VOID_FCT     (*TRMM_T)     ();
typedef F_VOID_FCT     (*TRSM_T)     ();

#endif

typedef struct
{
   char           type;                  /* Encoding of the data type */
   Int            usiz;    /* length in bytes of elementary data type */
   Int            size;               /* length in bytes of data type */

   char           * zero,
                  * one,
                  * negone;   /* pointers to contants of correct type */

   GESD2D_T       Cgesd2d;                         /* BLACS functions */
   GERV2D_T       Cgerv2d;
   GEBS2D_T       Cgebs2d;
   GEBR2D_T       Cgebr2d;
   GSUM2D_T       Cgsum2d;

   MMADD_T        Fmmadd;                       /* Addition functions */
   MMADD_T        Fmmcadd;
   MMADD_T        Fmmtadd;
   MMADD_T        Fmmtcadd;
   MMADD_T        Fmmdda;
   MMADD_T        Fmmddac;
   MMADD_T        Fmmddat;
   MMADD_T        Fmmddact;

   MMSHFT_T       Fcshft;                          /* Shift functions */
   MMSHFT_T       Frshft;

   VVDOT_T        Fvvdotu;                           /* Dot functions */
   VVDOT_T        Fvvdotc;

   TZPAD_T        Ftzpad;                       /* Array pad function */
   TZPADCPY_T     Ftzpadcpy;
   VVSET_T        Fset;

   TZSCAL_T       Ftzscal;                       /* Scaling functions */
   TZSCAL_T       Fhescal;
   TZSCAL_T       Ftzcnjg;

   AXPY_T         Faxpy;                              /* Level 1 BLAS */
   COPY_T         Fcopy;
   SWAP_T         Fswap;

   GEMV_T         Fgemv;                              /* Level 2 BLAS */
   SYMV_T         Fsymv;
   HEMV_T         Fhemv;
   TRMV_T         Ftrmv;
   TRSV_T         Ftrsv;

   AGEMV_T        Fagemv;
   ASYMV_T        Fasymv;
   AHEMV_T        Fahemv;
   ATRMV_T        Fatrmv;

   GERC_T         Fgerc;
   GERU_T         Fgeru;
   SYR_T          Fsyr;
   HER_T          Fher;
   SYR2_T         Fsyr2;
   HER2_T         Fher2;

   GEMM_T         Fgemm;                              /* Level 3 BLAS */
   SYMM_T         Fsymm;
   HEMM_T         Fhemm;
   SYRK_T         Fsyrk;
   HERK_T         Fherk;
   SYR2K_T        Fsyr2k;
   HER2K_T        Fher2k;
   TRMM_T         Ftrmm;
   TRSM_T         Ftrsm;

} PBTYP_T;

#ifdef __STDC__

typedef void           (*TZSYR_T)    ( PBTYP_T *, char *,    Int,
                                       Int,       Int,       Int,
                                       char *,    char *,    Int,
                                       char *,    Int,       char *,
                                       Int );
typedef void           (*TZSYR2_T)   ( PBTYP_T *, char *,    Int,
                                       Int,       Int,       Int,
                                       char *,    char *,    Int,
                                       char *,    Int,       char *,
                                       Int,       char *,    Int,
                                       char *,    Int );
typedef void           (*TZTRM_T)    ( PBTYP_T *, char *,    char *,
                                       char *,    char *,    Int,
                                       Int,       Int,       Int,
                                       char *,    char *,    Int,
                                       char *,    Int,       char *,
                                       Int );
typedef void           (*TZSYM_T)    ( PBTYP_T *, char *,    char *,
                                       Int,       Int,       Int,
                                       Int,       char *,    char *,
                                       Int,       char *,    Int,
                                       char *,    Int,       char *,
                                       Int,       char *,    Int );
#else

typedef void           (*TZSYR_T)    ();
typedef void           (*TZSYR2_T)   ();
typedef void           (*TZTRM_T)    ();
typedef void           (*TZSYM_T)    ();

#endif

typedef struct
{
   Int offd;                                /* Global diagonal offset */
   Int lcmt00;                            /* LCM value of first block */

   Int mp;                                    /* Local number of rows */
   Int imb1;                      /* Size of first row block (global) */
   Int imbloc;                       /* Size of first local row block */
   Int mb;                                          /* Row block size */
   Int lmbloc;                        /* Size of last local row block */
   Int mblks;                           /* Number of local row blocks */
   Int iupp;                /* LCM row bound for first diagonal block */
   Int upp;                       /* LCM row bound for diagonal block */
   Int prow;                       /* Relative row process coordinate */
   Int nprow;                               /* Number of process rows */

   Int nq;                                 /* Local number of columns */
   Int inb1;                   /* Size of first column block (global) */
   Int inbloc;                    /* Size of first local column block */
   Int nb;                                       /* Column block size */
   Int lnbloc;                     /* Size of last local column block */
   Int nblks;                        /* Number of local column blocks */
   Int ilow;             /* LCM column bound for first diagonal block */
   Int low;                    /* LCM column bound for diagonal block */
   Int pcol;                    /* Relative column process coordinate */
   Int npcol;                            /* Number of process columns */

   Int lcmb;    /* Least common multiple of nprow * mb and npcol * nb */

} PB_VM_T;

/*
*  ---------------------------------------------------------------------
*  #define macro constants
*  ---------------------------------------------------------------------
*/
#define    INT                 'I'                /* type identifiers */
#define    SREAL               'S'
#define    DREAL               'D'
#define    SCPLX               'C'
#define    DCPLX               'Z'

#define crot_ CROT


/*
 * These macros define how C routines will be called.  ADD_ assumes that
 * they will be called by fortran, which expects C routines to have an
 * underscore postfixed to the name (Suns, and the Intel expect this).
 * NOCHANGE indicates that fortran will be calling, and that it expects
 * the name called by fortran to be identical to that compiled by the C
 * (RS6K's do this).  UPCASE says it expects C routines called by fortran
 * to be in all upcase (CRAY wants this). 
 */

#define ADD_       0
#define NOCHANGE   1
#define UPCASE     2
#define C_CALL     3

#ifdef UpCase
#define F77_CALL_C UPCASE
#endif

#ifdef NoChange
#define F77_CALL_C NOCHANGE
#endif

#ifdef Add_
#define F77_CALL_C ADD_
#endif

#ifndef F77_CALL_C
#define F77_CALL_C ADD_
#endif

#if (F77_CALL_C == ADD_)
/*
 * These defines set up the naming scheme required to have a fortran 77
 * routine call a C routine
 * No redefinition necessary to have following Fortran to C interface:
 *           FORTRAN CALL               C DECLARATION
 *           call pdgemm(...)           void pdgemm_(...)
 *
 * This is the default.
 */

#endif

#if (F77_CALL_C == UPCASE)
/*
 * These defines set up the naming scheme required to have a fortran 77
 * routine call a C routine 
 * following Fortran to C interface:
 *           FORTRAN CALL               C DECLARATION
 *           call pdgemm(...)           void PDGEMM(...)
 */
                                                            /* TOOLS */
#define pdlasnbt_           PDLASNBT
#define pdlachkieee_        PDLACHKIEEE
#define pdlaiectl_          PDLAIECTL
#define pdlaiectb_          PDLAIECTB

#define pslasnbt_           PSLASNBT
#define pslachkieee_        PSLACHKIEEE
#define pslaiect_           PSLAIECT

#endif

#if (F77_CALL_C == NOCHANGE)
/*
 * These defines set up the naming scheme required to have a fortran 77
 * routine call a C routine 
 * for following Fortran to C interface:
 *           FORTRAN CALL               C DECLARATION
 *           call pdgemm(...)           void pdgemm(...)
 */
                                                            /* TOOLS */
#define pdlasnbt_           pdlasnbt
#define pdlachkieee_        pdlachkieee
#define pdlaiectl_          pdlaiectl
#define pdlaiectb_          pdlaiectb

#define pslasnbt_           pslasnbt
#define pslachkieee_        pslachkieee
#define pslaiect_           pslaiect
#endif
#include "./pblas.h"

#ifdef __STDC__
typedef void (*CPYPTR)(Int, Int, float *, Int, float *, Int);
#define SLVOID void
#else
typedef void (*CPYPTR)();
#define SLVOID char
#endif

#define ErrPrnt fprintf(stderr, "line %d of file %s\n",__LINE__, __FILE__);

#define Mdescset(desc, m, n, mb, nb, rsrc, csrc, ictxt, lld) \
{ \
   (desc)[DT_] = BLOCK_CYCLIC_2D; \
   (desc)[CTXT_] = (ictxt); \
   (desc)[M_] = (m); \
   (desc)[N_] = (n); \
   (desc)[MB_] = (mb); \
   (desc)[NB_] = (nb); \
   (desc)[RSRC_] = (rsrc); \
   (desc)[CSRC_] = (csrc); \
   (desc)[LLD_] = (lld); \
}

#define MCindxg2p(IG, nb, srcproc, nprocs) \
        ( ((srcproc) + (IG)/(nb)) % nprocs )

typedef struct {double r, i;} DCOMPLEX;
typedef struct {float r, i;} SCOMPLEX;

#define Mmalloc(M_ptr, M_type, M_elt, M_i, M_ctxt) \
{ \
   void pberror_(); \
   (M_ptr) = ( M_type * ) malloc((M_elt)*(sizeof(M_type))); \
   if (!(M_ptr)) \
   { \
      if ((M_elt) > 0) \
      { \
         (M_i) = 1; \
         fprintf(stderr, "Not enough memory on line %d of file %s!!\n", \
                 __LINE__, __FILE__); \
         pberror_(&(M_ctxt), __FILE__, &(M_i)); \
      } \
   } \
}
